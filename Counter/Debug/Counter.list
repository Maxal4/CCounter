
Counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800238c  0800238c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800238c  0800238c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800238c  0800238c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000010  080023a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  080023a4  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000298d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e4e  00000000  00000000  000229c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000358  00000000  00000000  00023818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d0  00000000  00000000  00023b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000df49  00000000  00000000  00023e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000047d8  00000000  00000000  00031d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000535d6  00000000  00000000  00036561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00089b37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a38  00000000  00000000  00089b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800228c 	.word	0x0800228c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800228c 	.word	0x0800228c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b086      	sub	sp, #24
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 ff99 	bl	8001330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 fe01 	bl	8001004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 fe49 	bl	8001098 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  extern int c;
  int x=0;
 8000406:	2300      	movs	r3, #0
 8000408:	607b      	str	r3, [r7, #4]
  int a=1;
 800040a:	2301      	movs	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
  int s=0;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  int q=0;
 8000412:	2300      	movs	r3, #0
 8000414:	60fb      	str	r3, [r7, #12]
  int w=0;
 8000416:	2300      	movs	r3, #0
 8000418:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 800041a:	49fa      	ldr	r1, [pc, #1000]	; (8000804 <main+0x410>)
 800041c:	2390      	movs	r3, #144	; 0x90
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	2201      	movs	r2, #1
 8000422:	0018      	movs	r0, r3
 8000424:	f001 fa77 	bl	8001916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8000428:	23c0      	movs	r3, #192	; 0xc0
 800042a:	011b      	lsls	r3, r3, #4
 800042c:	48f6      	ldr	r0, [pc, #984]	; (8000808 <main+0x414>)
 800042e:	2201      	movs	r2, #1
 8000430:	0019      	movs	r1, r3
 8000432:	f001 fa70 	bl	8001916 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(a==6){
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	2b06      	cmp	r3, #6
 800043a:	d101      	bne.n	8000440 <main+0x4c>
	  		  a=1;
 800043c:	2301      	movs	r3, #1
 800043e:	617b      	str	r3, [r7, #20]
	  	  	  }
	  	  	 if(s==0)
 8000440:	693b      	ldr	r3, [r7, #16]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d000      	beq.n	8000448 <main+0x54>
 8000446:	e0d7      	b.n	80005f8 <main+0x204>
	  	  	 {
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 8000448:	23e0      	movs	r3, #224	; 0xe0
 800044a:	0059      	lsls	r1, r3, #1
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2200      	movs	r2, #0
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fa5f 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 8000458:	49ec      	ldr	r1, [pc, #944]	; (800080c <main+0x418>)
 800045a:	4beb      	ldr	r3, [pc, #940]	; (8000808 <main+0x414>)
 800045c:	2200      	movs	r2, #0
 800045e:	0018      	movs	r0, r3
 8000460:	f001 fa59 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000464:	23c0      	movs	r3, #192	; 0xc0
 8000466:	01db      	lsls	r3, r3, #7
 8000468:	48e7      	ldr	r0, [pc, #924]	; (8000808 <main+0x414>)
 800046a:	2200      	movs	r2, #0
 800046c:	0019      	movs	r1, r3
 800046e:	f001 fa52 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000472:	2388      	movs	r3, #136	; 0x88
 8000474:	0099      	lsls	r1, r3, #2
 8000476:	2390      	movs	r3, #144	; 0x90
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	2200      	movs	r2, #0
 800047c:	0018      	movs	r0, r3
 800047e:	f001 fa4a 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, DIG1_Pin, GPIO_PIN_SET);
 8000482:	2380      	movs	r3, #128	; 0x80
 8000484:	0099      	lsls	r1, r3, #2
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	2201      	movs	r2, #1
 800048c:	0018      	movs	r0, r3
 800048e:	f001 fa42 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000492:	23e0      	movs	r3, #224	; 0xe0
 8000494:	0059      	lsls	r1, r3, #1
 8000496:	2390      	movs	r3, #144	; 0x90
 8000498:	05db      	lsls	r3, r3, #23
 800049a:	2201      	movs	r2, #1
 800049c:	0018      	movs	r0, r3
 800049e:	f001 fa3a 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 80004a2:	49db      	ldr	r1, [pc, #876]	; (8000810 <main+0x41c>)
 80004a4:	4bd8      	ldr	r3, [pc, #864]	; (8000808 <main+0x414>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 fa34 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_Delay(250);
 80004ae:	20fa      	movs	r0, #250	; 0xfa
 80004b0:	f000 ffa2 	bl	80013f8 <HAL_Delay>
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 80004b4:	23e0      	movs	r3, #224	; 0xe0
 80004b6:	0059      	lsls	r1, r3, #1
 80004b8:	2390      	movs	r3, #144	; 0x90
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2200      	movs	r2, #0
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fa29 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 80004c4:	49d1      	ldr	r1, [pc, #836]	; (800080c <main+0x418>)
 80004c6:	4bd0      	ldr	r3, [pc, #832]	; (8000808 <main+0x414>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 fa23 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 80004d0:	23c0      	movs	r3, #192	; 0xc0
 80004d2:	01db      	lsls	r3, r3, #7
 80004d4:	48cc      	ldr	r0, [pc, #816]	; (8000808 <main+0x414>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	0019      	movs	r1, r3
 80004da:	f001 fa1c 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 80004de:	2388      	movs	r3, #136	; 0x88
 80004e0:	0099      	lsls	r1, r3, #2
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fa14 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	01db      	lsls	r3, r3, #7
 80004f2:	48c5      	ldr	r0, [pc, #788]	; (8000808 <main+0x414>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	0019      	movs	r1, r3
 80004f8:	f001 fa0d 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 80004fc:	23e0      	movs	r3, #224	; 0xe0
 80004fe:	0059      	lsls	r1, r3, #1
 8000500:	2390      	movs	r3, #144	; 0x90
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	2201      	movs	r2, #1
 8000506:	0018      	movs	r0, r3
 8000508:	f001 fa05 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 800050c:	49c0      	ldr	r1, [pc, #768]	; (8000810 <main+0x41c>)
 800050e:	4bbe      	ldr	r3, [pc, #760]	; (8000808 <main+0x414>)
 8000510:	2201      	movs	r2, #1
 8000512:	0018      	movs	r0, r3
 8000514:	f001 f9ff 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_Delay(250);
 8000518:	20fa      	movs	r0, #250	; 0xfa
 800051a:	f000 ff6d 	bl	80013f8 <HAL_Delay>
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 800051e:	23e0      	movs	r3, #224	; 0xe0
 8000520:	0059      	lsls	r1, r3, #1
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2200      	movs	r2, #0
 8000528:	0018      	movs	r0, r3
 800052a:	f001 f9f4 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 800052e:	49b7      	ldr	r1, [pc, #732]	; (800080c <main+0x418>)
 8000530:	4bb5      	ldr	r3, [pc, #724]	; (8000808 <main+0x414>)
 8000532:	2200      	movs	r2, #0
 8000534:	0018      	movs	r0, r3
 8000536:	f001 f9ee 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 800053a:	23c0      	movs	r3, #192	; 0xc0
 800053c:	01db      	lsls	r3, r3, #7
 800053e:	48b2      	ldr	r0, [pc, #712]	; (8000808 <main+0x414>)
 8000540:	2200      	movs	r2, #0
 8000542:	0019      	movs	r1, r3
 8000544:	f001 f9e7 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000548:	2388      	movs	r3, #136	; 0x88
 800054a:	0099      	lsls	r1, r3, #2
 800054c:	2390      	movs	r3, #144	; 0x90
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2200      	movs	r2, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f001 f9df 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, DIG3_Pin, GPIO_PIN_SET);
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	019b      	lsls	r3, r3, #6
 800055c:	48aa      	ldr	r0, [pc, #680]	; (8000808 <main+0x414>)
 800055e:	2201      	movs	r2, #1
 8000560:	0019      	movs	r1, r3
 8000562:	f001 f9d8 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000566:	23e0      	movs	r3, #224	; 0xe0
 8000568:	0059      	lsls	r1, r3, #1
 800056a:	2390      	movs	r3, #144	; 0x90
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	2201      	movs	r2, #1
 8000570:	0018      	movs	r0, r3
 8000572:	f001 f9d0 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000576:	49a6      	ldr	r1, [pc, #664]	; (8000810 <main+0x41c>)
 8000578:	4ba3      	ldr	r3, [pc, #652]	; (8000808 <main+0x414>)
 800057a:	2201      	movs	r2, #1
 800057c:	0018      	movs	r0, r3
 800057e:	f001 f9ca 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_Delay(250);
 8000582:	20fa      	movs	r0, #250	; 0xfa
 8000584:	f000 ff38 	bl	80013f8 <HAL_Delay>
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 8000588:	23e0      	movs	r3, #224	; 0xe0
 800058a:	0059      	lsls	r1, r3, #1
 800058c:	2390      	movs	r3, #144	; 0x90
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	2200      	movs	r2, #0
 8000592:	0018      	movs	r0, r3
 8000594:	f001 f9bf 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 8000598:	499c      	ldr	r1, [pc, #624]	; (800080c <main+0x418>)
 800059a:	4b9b      	ldr	r3, [pc, #620]	; (8000808 <main+0x414>)
 800059c:	2200      	movs	r2, #0
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 f9b9 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 80005a4:	23c0      	movs	r3, #192	; 0xc0
 80005a6:	01db      	lsls	r3, r3, #7
 80005a8:	4897      	ldr	r0, [pc, #604]	; (8000808 <main+0x414>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	0019      	movs	r1, r3
 80005ae:	f001 f9b2 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 80005b2:	2388      	movs	r3, #136	; 0x88
 80005b4:	0099      	lsls	r1, r3, #2
 80005b6:	2390      	movs	r3, #144	; 0x90
 80005b8:	05db      	lsls	r3, r3, #23
 80005ba:	2200      	movs	r2, #0
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f9aa 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin, GPIO_PIN_SET);
 80005c2:	2390      	movs	r3, #144	; 0x90
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	0018      	movs	r0, r3
 80005cc:	f001 f9a3 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 80005d0:	23e0      	movs	r3, #224	; 0xe0
 80005d2:	0059      	lsls	r1, r3, #1
 80005d4:	2390      	movs	r3, #144	; 0x90
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2201      	movs	r2, #1
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 f99b 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 80005e0:	498b      	ldr	r1, [pc, #556]	; (8000810 <main+0x41c>)
 80005e2:	4b89      	ldr	r3, [pc, #548]	; (8000808 <main+0x414>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 f995 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_Delay(250);
 80005ec:	20fa      	movs	r0, #250	; 0xfa
 80005ee:	f000 ff03 	bl	80013f8 <HAL_Delay>
	  	  		s++;
 80005f2:	693b      	ldr	r3, [r7, #16]
 80005f4:	3301      	adds	r3, #1
 80005f6:	613b      	str	r3, [r7, #16]
	  	  	 }
	  	  if(HAL_GPIO_ReadPin(GPIOF, BUT_Pin)== GPIO_PIN_RESET)
 80005f8:	4b86      	ldr	r3, [pc, #536]	; (8000814 <main+0x420>)
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 f96d 	bl	80018dc <HAL_GPIO_ReadPin>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d000      	beq.n	8000608 <main+0x214>
 8000606:	e0ed      	b.n	80007e4 <main+0x3f0>
	  	  		  	  {
	  		    HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000608:	23c0      	movs	r3, #192	; 0xc0
 800060a:	01db      	lsls	r3, r3, #7
 800060c:	487e      	ldr	r0, [pc, #504]	; (8000808 <main+0x414>)
 800060e:	2200      	movs	r2, #0
 8000610:	0019      	movs	r1, r3
 8000612:	f001 f980 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000616:	2388      	movs	r3, #136	; 0x88
 8000618:	0099      	lsls	r1, r3, #2
 800061a:	2390      	movs	r3, #144	; 0x90
 800061c:	05db      	lsls	r3, r3, #23
 800061e:	2200      	movs	r2, #0
 8000620:	0018      	movs	r0, r3
 8000622:	f001 f978 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		q++;
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3301      	adds	r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
	  	  		HAL_Delay(1000);
 800062c:	23fa      	movs	r3, #250	; 0xfa
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	0018      	movs	r0, r3
 8000632:	f000 fee1 	bl	80013f8 <HAL_Delay>
	  	  		  		if(HAL_GPIO_ReadPin(GPIOF, BUT_Pin)== GPIO_PIN_RESET){
 8000636:	4b77      	ldr	r3, [pc, #476]	; (8000814 <main+0x420>)
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0018      	movs	r0, r3
 800063c:	f001 f94e 	bl	80018dc <HAL_GPIO_ReadPin>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d000      	beq.n	8000646 <main+0x252>
 8000644:	e0ce      	b.n	80007e4 <main+0x3f0>
	  	  	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 8000646:	23e0      	movs	r3, #224	; 0xe0
 8000648:	0059      	lsls	r1, r3, #1
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	2200      	movs	r2, #0
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f960 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 8000656:	496d      	ldr	r1, [pc, #436]	; (800080c <main+0x418>)
 8000658:	4b6b      	ldr	r3, [pc, #428]	; (8000808 <main+0x414>)
 800065a:	2200      	movs	r2, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f001 f95a 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000662:	23c0      	movs	r3, #192	; 0xc0
 8000664:	01db      	lsls	r3, r3, #7
 8000666:	4868      	ldr	r0, [pc, #416]	; (8000808 <main+0x414>)
 8000668:	2200      	movs	r2, #0
 800066a:	0019      	movs	r1, r3
 800066c:	f001 f953 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000670:	2388      	movs	r3, #136	; 0x88
 8000672:	0099      	lsls	r1, r3, #2
 8000674:	2390      	movs	r3, #144	; 0x90
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	2200      	movs	r2, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f001 f94b 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, DIG1_Pin, GPIO_PIN_SET);
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	0099      	lsls	r1, r3, #2
 8000684:	2390      	movs	r3, #144	; 0x90
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2201      	movs	r2, #1
 800068a:	0018      	movs	r0, r3
 800068c:	f001 f943 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|G_Pin, GPIO_PIN_SET);
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	0059      	lsls	r1, r3, #1
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2201      	movs	r2, #1
 800069a:	0018      	movs	r0, r3
 800069c:	f001 f93b 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin, GPIO_PIN_SET);
 80006a0:	495d      	ldr	r1, [pc, #372]	; (8000818 <main+0x424>)
 80006a2:	4b59      	ldr	r3, [pc, #356]	; (8000808 <main+0x414>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 f935 	bl	8001916 <HAL_GPIO_WritePin>
	  		  		  	HAL_Delay(250);
 80006ac:	20fa      	movs	r0, #250	; 0xfa
 80006ae:	f000 fea3 	bl	80013f8 <HAL_Delay>
	  		  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 80006b2:	23e0      	movs	r3, #224	; 0xe0
 80006b4:	0059      	lsls	r1, r3, #1
 80006b6:	2390      	movs	r3, #144	; 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 f92a 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 80006c2:	4952      	ldr	r1, [pc, #328]	; (800080c <main+0x418>)
 80006c4:	4b50      	ldr	r3, [pc, #320]	; (8000808 <main+0x414>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 f924 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 80006ce:	23c0      	movs	r3, #192	; 0xc0
 80006d0:	01db      	lsls	r3, r3, #7
 80006d2:	484d      	ldr	r0, [pc, #308]	; (8000808 <main+0x414>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	0019      	movs	r1, r3
 80006d8:	f001 f91d 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 80006dc:	2388      	movs	r3, #136	; 0x88
 80006de:	0099      	lsls	r1, r3, #2
 80006e0:	2390      	movs	r3, #144	; 0x90
 80006e2:	05db      	lsls	r3, r3, #23
 80006e4:	2200      	movs	r2, #0
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 f915 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	01db      	lsls	r3, r3, #7
 80006f0:	4845      	ldr	r0, [pc, #276]	; (8000808 <main+0x414>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	0019      	movs	r1, r3
 80006f6:	f001 f90e 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 80006fa:	4948      	ldr	r1, [pc, #288]	; (800081c <main+0x428>)
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <main+0x414>)
 80006fe:	2201      	movs	r2, #1
 8000700:	0018      	movs	r0, r3
 8000702:	f001 f908 	bl	8001916 <HAL_GPIO_WritePin>
	  		  		  	HAL_Delay(250);
 8000706:	20fa      	movs	r0, #250	; 0xfa
 8000708:	f000 fe76 	bl	80013f8 <HAL_Delay>
	  		  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 800070c:	23e0      	movs	r3, #224	; 0xe0
 800070e:	0059      	lsls	r1, r3, #1
 8000710:	2390      	movs	r3, #144	; 0x90
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	2200      	movs	r2, #0
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f8fd 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 800071c:	493b      	ldr	r1, [pc, #236]	; (800080c <main+0x418>)
 800071e:	4b3a      	ldr	r3, [pc, #232]	; (8000808 <main+0x414>)
 8000720:	2200      	movs	r2, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f001 f8f7 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000728:	23c0      	movs	r3, #192	; 0xc0
 800072a:	01db      	lsls	r3, r3, #7
 800072c:	4836      	ldr	r0, [pc, #216]	; (8000808 <main+0x414>)
 800072e:	2200      	movs	r2, #0
 8000730:	0019      	movs	r1, r3
 8000732:	f001 f8f0 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000736:	2388      	movs	r3, #136	; 0x88
 8000738:	0099      	lsls	r1, r3, #2
 800073a:	2390      	movs	r3, #144	; 0x90
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	2200      	movs	r2, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f8e8 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, DIG3_Pin, GPIO_PIN_SET);
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	019b      	lsls	r3, r3, #6
 800074a:	482f      	ldr	r0, [pc, #188]	; (8000808 <main+0x414>)
 800074c:	2201      	movs	r2, #1
 800074e:	0019      	movs	r1, r3
 8000750:	f001 f8e1 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000754:	2390      	movs	r3, #144	; 0x90
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	2201      	movs	r2, #1
 800075a:	2180      	movs	r1, #128	; 0x80
 800075c:	0018      	movs	r0, r3
 800075e:	f001 f8da 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000762:	492b      	ldr	r1, [pc, #172]	; (8000810 <main+0x41c>)
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <main+0x414>)
 8000766:	2201      	movs	r2, #1
 8000768:	0018      	movs	r0, r3
 800076a:	f001 f8d4 	bl	8001916 <HAL_GPIO_WritePin>
	  		  		  	HAL_Delay(250);
 800076e:	20fa      	movs	r0, #250	; 0xfa
 8000770:	f000 fe42 	bl	80013f8 <HAL_Delay>
	  		  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 8000774:	23e0      	movs	r3, #224	; 0xe0
 8000776:	0059      	lsls	r1, r3, #1
 8000778:	2390      	movs	r3, #144	; 0x90
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	2200      	movs	r2, #0
 800077e:	0018      	movs	r0, r3
 8000780:	f001 f8c9 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 8000784:	4921      	ldr	r1, [pc, #132]	; (800080c <main+0x418>)
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <main+0x414>)
 8000788:	2200      	movs	r2, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f001 f8c3 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	01db      	lsls	r3, r3, #7
 8000794:	481c      	ldr	r0, [pc, #112]	; (8000808 <main+0x414>)
 8000796:	2200      	movs	r2, #0
 8000798:	0019      	movs	r1, r3
 800079a:	f001 f8bc 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 800079e:	2388      	movs	r3, #136	; 0x88
 80007a0:	0099      	lsls	r1, r3, #2
 80007a2:	2390      	movs	r3, #144	; 0x90
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2200      	movs	r2, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 f8b4 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, DIG4_Pin, GPIO_PIN_SET);
 80007ae:	2390      	movs	r3, #144	; 0x90
 80007b0:	05db      	lsls	r3, r3, #23
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 f8ad 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 80007bc:	23e0      	movs	r3, #224	; 0xe0
 80007be:	0059      	lsls	r1, r3, #1
 80007c0:	2390      	movs	r3, #144	; 0x90
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	2201      	movs	r2, #1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 f8a5 	bl	8001916 <HAL_GPIO_WritePin>
	  		  	  		HAL_GPIO_WritePin(GPIOB, D_Pin|F_Pin, GPIO_PIN_SET);
 80007cc:	4914      	ldr	r1, [pc, #80]	; (8000820 <main+0x42c>)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <main+0x414>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	0018      	movs	r0, r3
 80007d4:	f001 f89f 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		  		HAL_Delay(250);
 80007d8:	20fa      	movs	r0, #250	; 0xfa
 80007da:	f000 fe0d 	bl	80013f8 <HAL_Delay>
	  	  		  			a++;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
	  	  		  		}
	  	  		  	  }

	  	  if(q>w){
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	dd05      	ble.n	80007f8 <main+0x404>
	  		  w++;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	3301      	adds	r3, #1
 80007f0:	60bb      	str	r3, [r7, #8]
	  		  c=0;
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <main+0x430>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
	  	  }
      x=c/a;
 80007f8:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <main+0x430>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6979      	ldr	r1, [r7, #20]
 80007fe:	0018      	movs	r0, r3
 8000800:	e012      	b.n	8000828 <main+0x434>
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	00000818 	.word	0x00000818
 8000808:	48000400 	.word	0x48000400
 800080c:	00009007 	.word	0x00009007
 8000810:	00009006 	.word	0x00009006
 8000814:	48001400 	.word	0x48001400
 8000818:	00009004 	.word	0x00009004
 800081c:	00008006 	.word	0x00008006
 8000820:	00008002 	.word	0x00008002
 8000824:	2000002c 	.word	0x2000002c
 8000828:	f7ff fcf8 	bl	800021c <__divsi3>
 800082c:	0003      	movs	r3, r0
 800082e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 8000830:	23e0      	movs	r3, #224	; 0xe0
 8000832:	0059      	lsls	r1, r3, #1
 8000834:	2390      	movs	r3, #144	; 0x90
 8000836:	05db      	lsls	r3, r3, #23
 8000838:	2200      	movs	r2, #0
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f86b 	bl	8001916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 8000840:	49ed      	ldr	r1, [pc, #948]	; (8000bf8 <main+0x804>)
 8000842:	4bee      	ldr	r3, [pc, #952]	; (8000bfc <main+0x808>)
 8000844:	2200      	movs	r2, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f001 f865 	bl	8001916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 800084c:	23c0      	movs	r3, #192	; 0xc0
 800084e:	01db      	lsls	r3, r3, #7
 8000850:	48ea      	ldr	r0, [pc, #936]	; (8000bfc <main+0x808>)
 8000852:	2200      	movs	r2, #0
 8000854:	0019      	movs	r1, r3
 8000856:	f001 f85e 	bl	8001916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 800085a:	2388      	movs	r3, #136	; 0x88
 800085c:	0099      	lsls	r1, r3, #2
 800085e:	2390      	movs	r3, #144	; 0x90
 8000860:	05db      	lsls	r3, r3, #23
 8000862:	2200      	movs	r2, #0
 8000864:	0018      	movs	r0, r3
 8000866:	f001 f856 	bl	8001916 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG4_Pin, GPIO_PIN_SET);
 800086a:	2390      	movs	r3, #144	; 0x90
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	2201      	movs	r2, #1
 8000870:	2120      	movs	r1, #32
 8000872:	0018      	movs	r0, r3
 8000874:	f001 f84f 	bl	8001916 <HAL_GPIO_WritePin>
  switch(x%10)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	210a      	movs	r1, #10
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff fdb3 	bl	80003e8 <__aeabi_idivmod>
 8000882:	000b      	movs	r3, r1
 8000884:	2b09      	cmp	r3, #9
 8000886:	d900      	bls.n	800088a <main+0x496>
 8000888:	e09b      	b.n	80009c2 <main+0x5ce>
 800088a:	009a      	lsls	r2, r3, #2
 800088c:	4bdc      	ldr	r3, [pc, #880]	; (8000c00 <main+0x80c>)
 800088e:	18d3      	adds	r3, r2, r3
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	469f      	mov	pc, r3
  	  	  {
  	  	  case 0:
  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000894:	23c0      	movs	r3, #192	; 0xc0
 8000896:	0059      	lsls	r1, r3, #1
 8000898:	2390      	movs	r3, #144	; 0x90
 800089a:	05db      	lsls	r3, r3, #23
 800089c:	2201      	movs	r2, #1
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 f839 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 80008a4:	49d7      	ldr	r1, [pc, #860]	; (8000c04 <main+0x810>)
 80008a6:	4bd5      	ldr	r3, [pc, #852]	; (8000bfc <main+0x808>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 f833 	bl	8001916 <HAL_GPIO_WritePin>

  	  	 	  	  break;
 80008b0:	e087      	b.n	80009c2 <main+0x5ce>
  	  	  case 1:
  	  		HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 80008b2:	2390      	movs	r3, #144	; 0x90
 80008b4:	05db      	lsls	r3, r3, #23
 80008b6:	2201      	movs	r2, #1
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 f82b 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	48cd      	ldr	r0, [pc, #820]	; (8000bfc <main+0x808>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	0019      	movs	r1, r3
 80008ca:	f001 f824 	bl	8001916 <HAL_GPIO_WritePin>
  	  	  	      break;
 80008ce:	e078      	b.n	80009c2 <main+0x5ce>
  	  	  case 2:
  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|G_Pin, GPIO_PIN_SET);
 80008d0:	23a0      	movs	r3, #160	; 0xa0
 80008d2:	0059      	lsls	r1, r3, #1
 80008d4:	2390      	movs	r3, #144	; 0x90
 80008d6:	05db      	lsls	r3, r3, #23
 80008d8:	2201      	movs	r2, #1
 80008da:	0018      	movs	r0, r3
 80008dc:	f001 f81b 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 80008e0:	49c9      	ldr	r1, [pc, #804]	; (8000c08 <main+0x814>)
 80008e2:	4bc6      	ldr	r3, [pc, #792]	; (8000bfc <main+0x808>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	0018      	movs	r0, r3
 80008e8:	f001 f815 	bl	8001916 <HAL_GPIO_WritePin>
  	  	  	  	  break;
 80008ec:	e069      	b.n	80009c2 <main+0x5ce>
  	  	  case 3:
  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 80008ee:	23e0      	movs	r3, #224	; 0xe0
 80008f0:	0059      	lsls	r1, r3, #1
 80008f2:	2390      	movs	r3, #144	; 0x90
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	2201      	movs	r2, #1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f001 f80c 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, B_Pin|D_Pin, GPIO_PIN_SET);
 80008fe:	49c3      	ldr	r1, [pc, #780]	; (8000c0c <main+0x818>)
 8000900:	4bbe      	ldr	r3, [pc, #760]	; (8000bfc <main+0x808>)
 8000902:	2201      	movs	r2, #1
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f806 	bl	8001916 <HAL_GPIO_WritePin>
  	  	 	  	  break;
 800090a:	e05a      	b.n	80009c2 <main+0x5ce>
  	  	  case 4:
  	  		HAL_GPIO_WritePin(GPIOA, C_Pin|G_Pin, GPIO_PIN_SET);
 800090c:	2390      	movs	r3, #144	; 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2201      	movs	r2, #1
 8000912:	21c0      	movs	r1, #192	; 0xc0
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fffe 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin, GPIO_PIN_SET);
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	021b      	lsls	r3, r3, #8
 800091e:	48b7      	ldr	r0, [pc, #732]	; (8000bfc <main+0x808>)
 8000920:	2201      	movs	r2, #1
 8000922:	0019      	movs	r1, r3
 8000924:	f000 fff7 	bl	8001916 <HAL_GPIO_WritePin>
  	  			break;
 8000928:	e04b      	b.n	80009c2 <main+0x5ce>
  	  	  case 5:
  	  	  	  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 800092a:	23e0      	movs	r3, #224	; 0xe0
 800092c:	0059      	lsls	r1, r3, #1
 800092e:	2390      	movs	r3, #144	; 0x90
 8000930:	05db      	lsls	r3, r3, #23
 8000932:	2201      	movs	r2, #1
 8000934:	0018      	movs	r0, r3
 8000936:	f000 ffee 	bl	8001916 <HAL_GPIO_WritePin>
  	  	  	  HAL_GPIO_WritePin(GPIOB, F_Pin|D_Pin, GPIO_PIN_SET);
 800093a:	49b5      	ldr	r1, [pc, #724]	; (8000c10 <main+0x81c>)
 800093c:	4baf      	ldr	r3, [pc, #700]	; (8000bfc <main+0x808>)
 800093e:	2201      	movs	r2, #1
 8000940:	0018      	movs	r0, r3
 8000942:	f000 ffe8 	bl	8001916 <HAL_GPIO_WritePin>
  	  	  	  	  break;
 8000946:	e03c      	b.n	80009c2 <main+0x5ce>
  	  	  case 6:
  	  		 HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000948:	23e0      	movs	r3, #224	; 0xe0
 800094a:	0059      	lsls	r1, r3, #1
 800094c:	2390      	movs	r3, #144	; 0x90
 800094e:	05db      	lsls	r3, r3, #23
 8000950:	2201      	movs	r2, #1
 8000952:	0018      	movs	r0, r3
 8000954:	f000 ffdf 	bl	8001916 <HAL_GPIO_WritePin>
  	  		 HAL_GPIO_WritePin(GPIOB, F_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000958:	49ae      	ldr	r1, [pc, #696]	; (8000c14 <main+0x820>)
 800095a:	4ba8      	ldr	r3, [pc, #672]	; (8000bfc <main+0x808>)
 800095c:	2201      	movs	r2, #1
 800095e:	0018      	movs	r0, r3
 8000960:	f000 ffd9 	bl	8001916 <HAL_GPIO_WritePin>
  	  		 	 break;
 8000964:	e02d      	b.n	80009c2 <main+0x5ce>
  	  	  case 7:
  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	0059      	lsls	r1, r3, #1
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	0018      	movs	r0, r3
 8000972:	f000 ffd0 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 8000976:	2380      	movs	r3, #128	; 0x80
 8000978:	015b      	lsls	r3, r3, #5
 800097a:	48a0      	ldr	r0, [pc, #640]	; (8000bfc <main+0x808>)
 800097c:	2201      	movs	r2, #1
 800097e:	0019      	movs	r1, r3
 8000980:	f000 ffc9 	bl	8001916 <HAL_GPIO_WritePin>
  	  	 	  	  break;
 8000984:	e01d      	b.n	80009c2 <main+0x5ce>
  	  	  case 8:
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000986:	23e0      	movs	r3, #224	; 0xe0
 8000988:	0059      	lsls	r1, r3, #1
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	2201      	movs	r2, #1
 8000990:	0018      	movs	r0, r3
 8000992:	f000 ffc0 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000996:	499b      	ldr	r1, [pc, #620]	; (8000c04 <main+0x810>)
 8000998:	4b98      	ldr	r3, [pc, #608]	; (8000bfc <main+0x808>)
 800099a:	2201      	movs	r2, #1
 800099c:	0018      	movs	r0, r3
 800099e:	f000 ffba 	bl	8001916 <HAL_GPIO_WritePin>
  	  	 	  	  break;
 80009a2:	e00e      	b.n	80009c2 <main+0x5ce>
  	  	  case 9:
  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 80009a4:	23e0      	movs	r3, #224	; 0xe0
 80009a6:	0059      	lsls	r1, r3, #1
 80009a8:	2390      	movs	r3, #144	; 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2201      	movs	r2, #1
 80009ae:	0018      	movs	r0, r3
 80009b0:	f000 ffb1 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|D_Pin, GPIO_PIN_SET);
 80009b4:	4998      	ldr	r1, [pc, #608]	; (8000c18 <main+0x824>)
 80009b6:	4b91      	ldr	r3, [pc, #580]	; (8000bfc <main+0x808>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 ffab 	bl	8001916 <HAL_GPIO_WritePin>
  	  	 	  	  break;
 80009c0:	46c0      	nop			; (mov r8, r8)
  	  	  }
  	  	 	 HAL_Delay(4);
 80009c2:	2004      	movs	r0, #4
 80009c4:	f000 fd18 	bl	80013f8 <HAL_Delay>
  	  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 80009c8:	23e0      	movs	r3, #224	; 0xe0
 80009ca:	0059      	lsls	r1, r3, #1
 80009cc:	2390      	movs	r3, #144	; 0x90
 80009ce:	05db      	lsls	r3, r3, #23
 80009d0:	2200      	movs	r2, #0
 80009d2:	0018      	movs	r0, r3
 80009d4:	f000 ff9f 	bl	8001916 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 80009d8:	4987      	ldr	r1, [pc, #540]	; (8000bf8 <main+0x804>)
 80009da:	4b88      	ldr	r3, [pc, #544]	; (8000bfc <main+0x808>)
 80009dc:	2200      	movs	r2, #0
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 ff99 	bl	8001916 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 80009e4:	23c0      	movs	r3, #192	; 0xc0
 80009e6:	01db      	lsls	r3, r3, #7
 80009e8:	4884      	ldr	r0, [pc, #528]	; (8000bfc <main+0x808>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	0019      	movs	r1, r3
 80009ee:	f000 ff92 	bl	8001916 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 80009f2:	2388      	movs	r3, #136	; 0x88
 80009f4:	0099      	lsls	r1, r3, #2
 80009f6:	2390      	movs	r3, #144	; 0x90
 80009f8:	05db      	lsls	r3, r3, #23
 80009fa:	2200      	movs	r2, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 ff8a 	bl	8001916 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, DIG3_Pin, GPIO_PIN_SET);
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	019b      	lsls	r3, r3, #6
 8000a06:	487d      	ldr	r0, [pc, #500]	; (8000bfc <main+0x808>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	f000 ff83 	bl	8001916 <HAL_GPIO_WritePin>
	  switch(x%100/10)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2164      	movs	r1, #100	; 0x64
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff fce7 	bl	80003e8 <__aeabi_idivmod>
 8000a1a:	000b      	movs	r3, r1
 8000a1c:	210a      	movs	r1, #10
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff fbfc 	bl	800021c <__divsi3>
 8000a24:	0003      	movs	r3, r0
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	d900      	bls.n	8000a2c <main+0x638>
 8000a2a:	e0a9      	b.n	8000b80 <main+0x78c>
 8000a2c:	009a      	lsls	r2, r3, #2
 8000a2e:	4b7b      	ldr	r3, [pc, #492]	; (8000c1c <main+0x828>)
 8000a30:	18d3      	adds	r3, r2, r3
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	469f      	mov	pc, r3
	  	  {
	  	  case 0:
	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000a36:	23c0      	movs	r3, #192	; 0xc0
 8000a38:	0059      	lsls	r1, r3, #1
 8000a3a:	2390      	movs	r3, #144	; 0x90
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	2201      	movs	r2, #1
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 ff68 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000a46:	496f      	ldr	r1, [pc, #444]	; (8000c04 <main+0x810>)
 8000a48:	4b6c      	ldr	r3, [pc, #432]	; (8000bfc <main+0x808>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 ff62 	bl	8001916 <HAL_GPIO_WritePin>

	  	 	  	  break;
 8000a52:	e095      	b.n	8000b80 <main+0x78c>
	  	  case 1:
	  		HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000a54:	2390      	movs	r3, #144	; 0x90
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 ff5a 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 8000a62:	2380      	movs	r3, #128	; 0x80
 8000a64:	015b      	lsls	r3, r3, #5
 8000a66:	4865      	ldr	r0, [pc, #404]	; (8000bfc <main+0x808>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	f000 ff53 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	      break;
 8000a70:	e086      	b.n	8000b80 <main+0x78c>
	  	  case 2:
	  		HAL_GPIO_WritePin(GPIOA, A_Pin|G_Pin, GPIO_PIN_SET);
 8000a72:	23a0      	movs	r3, #160	; 0xa0
 8000a74:	0059      	lsls	r1, r3, #1
 8000a76:	2390      	movs	r3, #144	; 0x90
 8000a78:	05db      	lsls	r3, r3, #23
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 ff4a 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000a82:	4961      	ldr	r1, [pc, #388]	; (8000c08 <main+0x814>)
 8000a84:	4b5d      	ldr	r3, [pc, #372]	; (8000bfc <main+0x808>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 ff44 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000a8e:	e077      	b.n	8000b80 <main+0x78c>
	  	  case 3:
	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000a90:	23e0      	movs	r3, #224	; 0xe0
 8000a92:	0059      	lsls	r1, r3, #1
 8000a94:	2390      	movs	r3, #144	; 0x90
 8000a96:	05db      	lsls	r3, r3, #23
 8000a98:	2201      	movs	r2, #1
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 ff3b 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, B_Pin|D_Pin, GPIO_PIN_SET);
 8000aa0:	495a      	ldr	r1, [pc, #360]	; (8000c0c <main+0x818>)
 8000aa2:	4b56      	ldr	r3, [pc, #344]	; (8000bfc <main+0x808>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 ff35 	bl	8001916 <HAL_GPIO_WritePin>
	  	 	  	  break;
 8000aac:	e068      	b.n	8000b80 <main+0x78c>
	  	  case 4:
	  		HAL_GPIO_WritePin(GPIOA, C_Pin|G_Pin, GPIO_PIN_SET);
 8000aae:	2390      	movs	r3, #144	; 0x90
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	21c0      	movs	r1, #192	; 0xc0
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 ff2d 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin, GPIO_PIN_SET);
 8000abc:	2390      	movs	r3, #144	; 0x90
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	484e      	ldr	r0, [pc, #312]	; (8000bfc <main+0x808>)
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	f000 ff26 	bl	8001916 <HAL_GPIO_WritePin>
	  			break;
 8000aca:	e059      	b.n	8000b80 <main+0x78c>
	  	  case 5:
	  	  	  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000acc:	23e0      	movs	r3, #224	; 0xe0
 8000ace:	0059      	lsls	r1, r3, #1
 8000ad0:	2390      	movs	r3, #144	; 0x90
 8000ad2:	05db      	lsls	r3, r3, #23
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 ff1d 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  HAL_GPIO_WritePin(GPIOB, F_Pin|D_Pin, GPIO_PIN_SET);
 8000adc:	494c      	ldr	r1, [pc, #304]	; (8000c10 <main+0x81c>)
 8000ade:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <main+0x808>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 ff17 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	  break;
 8000ae8:	e04a      	b.n	8000b80 <main+0x78c>
	  	  case 6:
	  		 HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000aea:	23e0      	movs	r3, #224	; 0xe0
 8000aec:	0059      	lsls	r1, r3, #1
 8000aee:	2390      	movs	r3, #144	; 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	2201      	movs	r2, #1
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 ff0e 	bl	8001916 <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOB, F_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000afa:	4946      	ldr	r1, [pc, #280]	; (8000c14 <main+0x820>)
 8000afc:	4b3f      	ldr	r3, [pc, #252]	; (8000bfc <main+0x808>)
 8000afe:	2201      	movs	r2, #1
 8000b00:	0018      	movs	r0, r3
 8000b02:	f000 ff08 	bl	8001916 <HAL_GPIO_WritePin>
	  		 	 break;
 8000b06:	e03b      	b.n	8000b80 <main+0x78c>
	  	  case 7:
	  		HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000b08:	2390      	movs	r3, #144	; 0x90
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 ff00 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB,A_Pin|B_Pin, GPIO_PIN_SET);
 8000b16:	2388      	movs	r3, #136	; 0x88
 8000b18:	015b      	lsls	r3, r3, #5
 8000b1a:	4838      	ldr	r0, [pc, #224]	; (8000bfc <main+0x808>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	0019      	movs	r1, r3
 8000b20:	f000 fef9 	bl	8001916 <HAL_GPIO_WritePin>

	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000b24:	23c0      	movs	r3, #192	; 0xc0
 8000b26:	0059      	lsls	r1, r3, #1
 8000b28:	2390      	movs	r3, #144	; 0x90
 8000b2a:	05db      	lsls	r3, r3, #23
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f000 fef1 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	015b      	lsls	r3, r3, #5
 8000b38:	4830      	ldr	r0, [pc, #192]	; (8000bfc <main+0x808>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	f000 feea 	bl	8001916 <HAL_GPIO_WritePin>
	  	 	  	  break;
 8000b42:	e01d      	b.n	8000b80 <main+0x78c>
	  	  case 8:
  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000b44:	23e0      	movs	r3, #224	; 0xe0
 8000b46:	0059      	lsls	r1, r3, #1
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f000 fee1 	bl	8001916 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000b54:	492b      	ldr	r1, [pc, #172]	; (8000c04 <main+0x810>)
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <main+0x808>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 fedb 	bl	8001916 <HAL_GPIO_WritePin>
	  	 	  	  break;
 8000b60:	e00e      	b.n	8000b80 <main+0x78c>
	  	  case 9:
	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000b62:	23e0      	movs	r3, #224	; 0xe0
 8000b64:	0059      	lsls	r1, r3, #1
 8000b66:	2390      	movs	r3, #144	; 0x90
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f000 fed2 	bl	8001916 <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|D_Pin, GPIO_PIN_SET);
 8000b72:	4929      	ldr	r1, [pc, #164]	; (8000c18 <main+0x824>)
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <main+0x808>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 fecc 	bl	8001916 <HAL_GPIO_WritePin>
	  	 	  	  break;
 8000b7e:	46c0      	nop			; (mov r8, r8)
	  	  }
	  	  	 	 HAL_Delay(4);
 8000b80:	2004      	movs	r0, #4
 8000b82:	f000 fc39 	bl	80013f8 <HAL_Delay>
   	  		  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 8000b86:	23e0      	movs	r3, #224	; 0xe0
 8000b88:	0059      	lsls	r1, r3, #1
 8000b8a:	2390      	movs	r3, #144	; 0x90
 8000b8c:	05db      	lsls	r3, r3, #23
 8000b8e:	2200      	movs	r2, #0
 8000b90:	0018      	movs	r0, r3
 8000b92:	f000 fec0 	bl	8001916 <HAL_GPIO_WritePin>
   	  		  HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 8000b96:	4918      	ldr	r1, [pc, #96]	; (8000bf8 <main+0x804>)
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <main+0x808>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f000 feba 	bl	8001916 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000ba2:	23c0      	movs	r3, #192	; 0xc0
 8000ba4:	01db      	lsls	r3, r3, #7
 8000ba6:	4815      	ldr	r0, [pc, #84]	; (8000bfc <main+0x808>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	0019      	movs	r1, r3
 8000bac:	f000 feb3 	bl	8001916 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000bb0:	2388      	movs	r3, #136	; 0x88
 8000bb2:	0099      	lsls	r1, r3, #2
 8000bb4:	2390      	movs	r3, #144	; 0x90
 8000bb6:	05db      	lsls	r3, r3, #23
 8000bb8:	2200      	movs	r2, #0
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f000 feab 	bl	8001916 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB, DIG2_Pin, GPIO_PIN_SET);
 8000bc0:	2380      	movs	r3, #128	; 0x80
 8000bc2:	01db      	lsls	r3, r3, #7
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <main+0x808>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	0019      	movs	r1, r3
 8000bca:	f000 fea4 	bl	8001916 <HAL_GPIO_WritePin>
	  		  switch(x%1000/100)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	22fa      	movs	r2, #250	; 0xfa
 8000bd2:	0091      	lsls	r1, r2, #2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fc07 	bl	80003e8 <__aeabi_idivmod>
 8000bda:	000b      	movs	r3, r1
 8000bdc:	2164      	movs	r1, #100	; 0x64
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fb1c 	bl	800021c <__divsi3>
 8000be4:	0003      	movs	r3, r0
 8000be6:	2b09      	cmp	r3, #9
 8000be8:	d900      	bls.n	8000bec <main+0x7f8>
 8000bea:	e0b2      	b.n	8000d52 <main+0x95e>
 8000bec:	009a      	lsls	r2, r3, #2
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <main+0x82c>)
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	469f      	mov	pc, r3
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	00009007 	.word	0x00009007
 8000bfc:	48000400 	.word	0x48000400
 8000c00:	080022c4 	.word	0x080022c4
 8000c04:	00009006 	.word	0x00009006
 8000c08:	00001006 	.word	0x00001006
 8000c0c:	00001002 	.word	0x00001002
 8000c10:	00008002 	.word	0x00008002
 8000c14:	00008006 	.word	0x00008006
 8000c18:	00009002 	.word	0x00009002
 8000c1c:	080022ec 	.word	0x080022ec
 8000c20:	08002314 	.word	0x08002314
		  	  {
		  	  case 0:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	0059      	lsls	r1, r3, #1
 8000c28:	2390      	movs	r3, #144	; 0x90
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 fe71 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000c34:	49e8      	ldr	r1, [pc, #928]	; (8000fd8 <main+0xbe4>)
 8000c36:	4be9      	ldr	r3, [pc, #932]	; (8000fdc <main+0xbe8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f000 fe6b 	bl	8001916 <HAL_GPIO_WritePin>

		  	 	  	  break;
 8000c40:	e087      	b.n	8000d52 <main+0x95e>
		  	  case 1:
		  		HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000c42:	2390      	movs	r3, #144	; 0x90
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	2201      	movs	r2, #1
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 fe63 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	015b      	lsls	r3, r3, #5
 8000c54:	48e1      	ldr	r0, [pc, #900]	; (8000fdc <main+0xbe8>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	0019      	movs	r1, r3
 8000c5a:	f000 fe5c 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	      break;
 8000c5e:	e078      	b.n	8000d52 <main+0x95e>
		  	  case 2:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|G_Pin, GPIO_PIN_SET);
 8000c60:	23a0      	movs	r3, #160	; 0xa0
 8000c62:	0059      	lsls	r1, r3, #1
 8000c64:	2390      	movs	r3, #144	; 0x90
 8000c66:	05db      	lsls	r3, r3, #23
 8000c68:	2201      	movs	r2, #1
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fe53 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000c70:	49db      	ldr	r1, [pc, #876]	; (8000fe0 <main+0xbec>)
 8000c72:	4bda      	ldr	r3, [pc, #872]	; (8000fdc <main+0xbe8>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fe4d 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	  	  break;
 8000c7c:	e069      	b.n	8000d52 <main+0x95e>
		  	  case 3:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000c7e:	23e0      	movs	r3, #224	; 0xe0
 8000c80:	0059      	lsls	r1, r3, #1
 8000c82:	2390      	movs	r3, #144	; 0x90
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	2201      	movs	r2, #1
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fe44 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin|D_Pin, GPIO_PIN_SET);
 8000c8e:	49d5      	ldr	r1, [pc, #852]	; (8000fe4 <main+0xbf0>)
 8000c90:	4bd2      	ldr	r3, [pc, #840]	; (8000fdc <main+0xbe8>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 fe3e 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000c9a:	e05a      	b.n	8000d52 <main+0x95e>
		  	  case 4:
		  		HAL_GPIO_WritePin(GPIOA, C_Pin|G_Pin, GPIO_PIN_SET);
 8000c9c:	2390      	movs	r3, #144	; 0x90
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	21c0      	movs	r1, #192	; 0xc0
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fe36 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin, GPIO_PIN_SET);
 8000caa:	2390      	movs	r3, #144	; 0x90
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	48cb      	ldr	r0, [pc, #812]	; (8000fdc <main+0xbe8>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	0019      	movs	r1, r3
 8000cb4:	f000 fe2f 	bl	8001916 <HAL_GPIO_WritePin>
		  			break;
 8000cb8:	e04b      	b.n	8000d52 <main+0x95e>
		  	  case 5:
		  	  	  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000cba:	23e0      	movs	r3, #224	; 0xe0
 8000cbc:	0059      	lsls	r1, r3, #1
 8000cbe:	2390      	movs	r3, #144	; 0x90
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fe26 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(GPIOB, F_Pin|D_Pin, GPIO_PIN_SET);
 8000cca:	49c7      	ldr	r1, [pc, #796]	; (8000fe8 <main+0xbf4>)
 8000ccc:	4bc3      	ldr	r3, [pc, #780]	; (8000fdc <main+0xbe8>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 fe20 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	  	  break;
 8000cd6:	e03c      	b.n	8000d52 <main+0x95e>
		  	  case 6:
		  		 HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000cd8:	23e0      	movs	r3, #224	; 0xe0
 8000cda:	0059      	lsls	r1, r3, #1
 8000cdc:	2390      	movs	r3, #144	; 0x90
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fe17 	bl	8001916 <HAL_GPIO_WritePin>
		  		 HAL_GPIO_WritePin(GPIOB, F_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000ce8:	49c0      	ldr	r1, [pc, #768]	; (8000fec <main+0xbf8>)
 8000cea:	4bbc      	ldr	r3, [pc, #752]	; (8000fdc <main+0xbe8>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 fe11 	bl	8001916 <HAL_GPIO_WritePin>
		  		 	 break;
 8000cf4:	e02d      	b.n	8000d52 <main+0x95e>
		  	  case 7:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000cf6:	23c0      	movs	r3, #192	; 0xc0
 8000cf8:	0059      	lsls	r1, r3, #1
 8000cfa:	2390      	movs	r3, #144	; 0x90
 8000cfc:	05db      	lsls	r3, r3, #23
 8000cfe:	2201      	movs	r2, #1
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fe08 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 8000d06:	2380      	movs	r3, #128	; 0x80
 8000d08:	015b      	lsls	r3, r3, #5
 8000d0a:	48b4      	ldr	r0, [pc, #720]	; (8000fdc <main+0xbe8>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	0019      	movs	r1, r3
 8000d10:	f000 fe01 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000d14:	e01d      	b.n	8000d52 <main+0x95e>
		  	  case 8:
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000d16:	23e0      	movs	r3, #224	; 0xe0
 8000d18:	0059      	lsls	r1, r3, #1
 8000d1a:	2390      	movs	r3, #144	; 0x90
 8000d1c:	05db      	lsls	r3, r3, #23
 8000d1e:	2201      	movs	r2, #1
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 fdf8 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000d26:	49ac      	ldr	r1, [pc, #688]	; (8000fd8 <main+0xbe4>)
 8000d28:	4bac      	ldr	r3, [pc, #688]	; (8000fdc <main+0xbe8>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f000 fdf2 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000d32:	e00e      	b.n	8000d52 <main+0x95e>
		  	  case 9:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000d34:	23e0      	movs	r3, #224	; 0xe0
 8000d36:	0059      	lsls	r1, r3, #1
 8000d38:	2390      	movs	r3, #144	; 0x90
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 fde9 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|D_Pin, GPIO_PIN_SET);
 8000d44:	49aa      	ldr	r1, [pc, #680]	; (8000ff0 <main+0xbfc>)
 8000d46:	4ba5      	ldr	r3, [pc, #660]	; (8000fdc <main+0xbe8>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fde3 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000d50:	46c0      	nop			; (mov r8, r8)
		  	  }
	  		  	  	 	 HAL_Delay(5);
 8000d52:	2005      	movs	r0, #5
 8000d54:	f000 fb50 	bl	80013f8 <HAL_Delay>
	   		  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_RESET);
 8000d58:	23e0      	movs	r3, #224	; 0xe0
 8000d5a:	0059      	lsls	r1, r3, #1
 8000d5c:	2390      	movs	r3, #144	; 0x90
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	2200      	movs	r2, #0
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 fdd7 	bl	8001916 <HAL_GPIO_WritePin>
	   		  HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin|DP_Pin, GPIO_PIN_RESET);
 8000d68:	49a2      	ldr	r1, [pc, #648]	; (8000ff4 <main+0xc00>)
 8000d6a:	4b9c      	ldr	r3, [pc, #624]	; (8000fdc <main+0xbe8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f000 fdd1 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  HAL_GPIO_WritePin(GPIOB, DIG2_Pin|DIG3_Pin, GPIO_PIN_RESET);
 8000d74:	23c0      	movs	r3, #192	; 0xc0
 8000d76:	01db      	lsls	r3, r3, #7
 8000d78:	4898      	ldr	r0, [pc, #608]	; (8000fdc <main+0xbe8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	f000 fdca 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  HAL_GPIO_WritePin(GPIOA, DIG4_Pin|DIG1_Pin, GPIO_PIN_RESET);
 8000d82:	2388      	movs	r3, #136	; 0x88
 8000d84:	0099      	lsls	r1, r3, #2
 8000d86:	2390      	movs	r3, #144	; 0x90
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 fdc2 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  HAL_GPIO_WritePin(GPIOA, DIG1_Pin, GPIO_PIN_SET);
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	0099      	lsls	r1, r3, #2
 8000d96:	2390      	movs	r3, #144	; 0x90
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fdba 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  switch(x/1000)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	22fa      	movs	r2, #250	; 0xfa
 8000da6:	0091      	lsls	r1, r2, #2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff fa37 	bl	800021c <__divsi3>
 8000dae:	0003      	movs	r3, r0
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	d900      	bls.n	8000db6 <main+0x9c2>
 8000db4:	e0a9      	b.n	8000f0a <main+0xb16>
 8000db6:	009a      	lsls	r2, r3, #2
 8000db8:	4b8f      	ldr	r3, [pc, #572]	; (8000ff8 <main+0xc04>)
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	469f      	mov	pc, r3
		  	  {
		  	  case 0:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000dc0:	23c0      	movs	r3, #192	; 0xc0
 8000dc2:	0059      	lsls	r1, r3, #1
 8000dc4:	2390      	movs	r3, #144	; 0x90
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	2201      	movs	r2, #1
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fda3 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000dd0:	4981      	ldr	r1, [pc, #516]	; (8000fd8 <main+0xbe4>)
 8000dd2:	4b82      	ldr	r3, [pc, #520]	; (8000fdc <main+0xbe8>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 fd9d 	bl	8001916 <HAL_GPIO_WritePin>

		  	 	  	  break;
 8000ddc:	e095      	b.n	8000f0a <main+0xb16>
		  	  case 1:
		  		HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000dde:	2390      	movs	r3, #144	; 0x90
 8000de0:	05db      	lsls	r3, r3, #23
 8000de2:	2201      	movs	r2, #1
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 fd95 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	487a      	ldr	r0, [pc, #488]	; (8000fdc <main+0xbe8>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	0019      	movs	r1, r3
 8000df6:	f000 fd8e 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	      break;
 8000dfa:	e086      	b.n	8000f0a <main+0xb16>
		  	  case 2:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|G_Pin, GPIO_PIN_SET);
 8000dfc:	23a0      	movs	r3, #160	; 0xa0
 8000dfe:	0059      	lsls	r1, r3, #1
 8000e00:	2390      	movs	r3, #144	; 0x90
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	2201      	movs	r2, #1
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 fd85 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000e0c:	4974      	ldr	r1, [pc, #464]	; (8000fe0 <main+0xbec>)
 8000e0e:	4b73      	ldr	r3, [pc, #460]	; (8000fdc <main+0xbe8>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 fd7f 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	  	  break;
 8000e18:	e077      	b.n	8000f0a <main+0xb16>
		  	  case 3:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000e1a:	23e0      	movs	r3, #224	; 0xe0
 8000e1c:	0059      	lsls	r1, r3, #1
 8000e1e:	2390      	movs	r3, #144	; 0x90
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	2201      	movs	r2, #1
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fd76 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin|D_Pin, GPIO_PIN_SET);
 8000e2a:	496e      	ldr	r1, [pc, #440]	; (8000fe4 <main+0xbf0>)
 8000e2c:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <main+0xbe8>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	0018      	movs	r0, r3
 8000e32:	f000 fd70 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000e36:	e068      	b.n	8000f0a <main+0xb16>
		  	  case 4:
		  		HAL_GPIO_WritePin(GPIOA, C_Pin|G_Pin, GPIO_PIN_SET);
 8000e38:	2390      	movs	r3, #144	; 0x90
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	21c0      	movs	r1, #192	; 0xc0
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fd68 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin, GPIO_PIN_SET);
 8000e46:	2390      	movs	r3, #144	; 0x90
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	4864      	ldr	r0, [pc, #400]	; (8000fdc <main+0xbe8>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	0019      	movs	r1, r3
 8000e50:	f000 fd61 	bl	8001916 <HAL_GPIO_WritePin>
		  			break;
 8000e54:	e059      	b.n	8000f0a <main+0xb16>
		  	  case 5:
		  	  	  HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000e56:	23e0      	movs	r3, #224	; 0xe0
 8000e58:	0059      	lsls	r1, r3, #1
 8000e5a:	2390      	movs	r3, #144	; 0x90
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	2201      	movs	r2, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 fd58 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	  HAL_GPIO_WritePin(GPIOB, F_Pin|D_Pin, GPIO_PIN_SET);
 8000e66:	4960      	ldr	r1, [pc, #384]	; (8000fe8 <main+0xbf4>)
 8000e68:	4b5c      	ldr	r3, [pc, #368]	; (8000fdc <main+0xbe8>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f000 fd52 	bl	8001916 <HAL_GPIO_WritePin>
		  	  	  	  break;
 8000e72:	e04a      	b.n	8000f0a <main+0xb16>
		  	  case 6:
		  		 HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000e74:	23e0      	movs	r3, #224	; 0xe0
 8000e76:	0059      	lsls	r1, r3, #1
 8000e78:	2390      	movs	r3, #144	; 0x90
 8000e7a:	05db      	lsls	r3, r3, #23
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fd49 	bl	8001916 <HAL_GPIO_WritePin>
		  		 HAL_GPIO_WritePin(GPIOB, F_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000e84:	4959      	ldr	r1, [pc, #356]	; (8000fec <main+0xbf8>)
 8000e86:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <main+0xbe8>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fd43 	bl	8001916 <HAL_GPIO_WritePin>
		  		 	 break;
 8000e90:	e03b      	b.n	8000f0a <main+0xb16>
		  	  case 7:
		  		HAL_GPIO_WritePin(GPIOA, C_Pin, GPIO_PIN_SET);
 8000e92:	2390      	movs	r3, #144	; 0x90
 8000e94:	05db      	lsls	r3, r3, #23
 8000e96:	2201      	movs	r2, #1
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 fd3b 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB,A_Pin|B_Pin, GPIO_PIN_SET);
 8000ea0:	2388      	movs	r3, #136	; 0x88
 8000ea2:	015b      	lsls	r3, r3, #5
 8000ea4:	484d      	ldr	r0, [pc, #308]	; (8000fdc <main+0xbe8>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	f000 fd34 	bl	8001916 <HAL_GPIO_WritePin>

		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin, GPIO_PIN_SET);
 8000eae:	23c0      	movs	r3, #192	; 0xc0
 8000eb0:	0059      	lsls	r1, r3, #1
 8000eb2:	2390      	movs	r3, #144	; 0x90
 8000eb4:	05db      	lsls	r3, r3, #23
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f000 fd2c 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_SET);
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	015b      	lsls	r3, r3, #5
 8000ec2:	4846      	ldr	r0, [pc, #280]	; (8000fdc <main+0xbe8>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	0019      	movs	r1, r3
 8000ec8:	f000 fd25 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000ecc:	e01d      	b.n	8000f0a <main+0xb16>
		  	  case 8:
	  	  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000ece:	23e0      	movs	r3, #224	; 0xe0
 8000ed0:	0059      	lsls	r1, r3, #1
 8000ed2:	2390      	movs	r3, #144	; 0x90
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fd1c 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|E_Pin|D_Pin, GPIO_PIN_SET);
 8000ede:	493e      	ldr	r1, [pc, #248]	; (8000fd8 <main+0xbe4>)
 8000ee0:	4b3e      	ldr	r3, [pc, #248]	; (8000fdc <main+0xbe8>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 fd16 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000eea:	e00e      	b.n	8000f0a <main+0xb16>
		  	  case 9:
		  		HAL_GPIO_WritePin(GPIOA, A_Pin|C_Pin|G_Pin, GPIO_PIN_SET);
 8000eec:	23e0      	movs	r3, #224	; 0xe0
 8000eee:	0059      	lsls	r1, r3, #1
 8000ef0:	2390      	movs	r3, #144	; 0x90
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fd0d 	bl	8001916 <HAL_GPIO_WritePin>
		  		HAL_GPIO_WritePin(GPIOB, F_Pin|B_Pin|D_Pin, GPIO_PIN_SET);
 8000efc:	493c      	ldr	r1, [pc, #240]	; (8000ff0 <main+0xbfc>)
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <main+0xbe8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 fd07 	bl	8001916 <HAL_GPIO_WritePin>
		  	 	  	  break;
 8000f08:	46c0      	nop			; (mov r8, r8)
		  	  }
	  	  	  	  	 	 HAL_Delay(4);
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f000 fa74 	bl	80013f8 <HAL_Delay>
	  	  	  	   HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_SET);
 8000f10:	493a      	ldr	r1, [pc, #232]	; (8000ffc <main+0xc08>)
 8000f12:	2390      	movs	r3, #144	; 0x90
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	2201      	movs	r2, #1
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fcfc 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	   HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_SET);
 8000f1e:	23c0      	movs	r3, #192	; 0xc0
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	482e      	ldr	r0, [pc, #184]	; (8000fdc <main+0xbe8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	0019      	movs	r1, r3
 8000f28:	f000 fcf5 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	   switch(a)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	2b05      	cmp	r3, #5
 8000f30:	d901      	bls.n	8000f36 <main+0xb42>
 8000f32:	f7ff fa80 	bl	8000436 <main+0x42>
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	009a      	lsls	r2, r3, #2
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <main+0xc0c>)
 8000f3c:	18d3      	adds	r3, r2, r3
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	469f      	mov	pc, r3
	  	  	  	  	 	 {
	  	  	  	 	  case 1:
	  	  	  	 		  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000f42:	2380      	movs	r3, #128	; 0x80
 8000f44:	0119      	lsls	r1, r3, #4
 8000f46:	2390      	movs	r3, #144	; 0x90
 8000f48:	05db      	lsls	r3, r3, #23
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f000 fce2 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 		  break;
 8000f52:	e03e      	b.n	8000fd2 <main+0xbde>
	  	  	  	 	  case 2:
	  	  	  	 		  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	0119      	lsls	r1, r3, #4
 8000f58:	2390      	movs	r3, #144	; 0x90
 8000f5a:	05db      	lsls	r3, r3, #23
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fcd9 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 		  HAL_GPIO_WritePin(GPIOB, LED2_Pin, GPIO_PIN_RESET);
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	481c      	ldr	r0, [pc, #112]	; (8000fdc <main+0xbe8>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	f000 fcd2 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 	  		  break;
 8000f72:	e02e      	b.n	8000fd2 <main+0xbde>
	  	  	  	 	  case 3:
	  	  	  	 		  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	0119      	lsls	r1, r3, #4
 8000f78:	2390      	movs	r3, #144	; 0x90
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 fcc9 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 		  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f84:	23c0      	movs	r3, #192	; 0xc0
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4814      	ldr	r0, [pc, #80]	; (8000fdc <main+0xbe8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	0019      	movs	r1, r3
 8000f8e:	f000 fcc2 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 	  		  break;
 8000f92:	e01e      	b.n	8000fd2 <main+0xbde>
	  	  	  	 	  case 4:
	  	  	  		      HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000f94:	2381      	movs	r3, #129	; 0x81
 8000f96:	0119      	lsls	r1, r3, #4
 8000f98:	2390      	movs	r3, #144	; 0x90
 8000f9a:	05db      	lsls	r3, r3, #23
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 fcb9 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 		  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000fa4:	23c0      	movs	r3, #192	; 0xc0
 8000fa6:	011b      	lsls	r3, r3, #4
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <main+0xbe8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	0019      	movs	r1, r3
 8000fae:	f000 fcb2 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 		      break;
 8000fb2:	e00e      	b.n	8000fd2 <main+0xbde>
	  	  	  	 	  case 5:
	  	  	  		      HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED4_Pin|LED5_Pin, GPIO_PIN_RESET);
 8000fb4:	4911      	ldr	r1, [pc, #68]	; (8000ffc <main+0xc08>)
 8000fb6:	2390      	movs	r3, #144	; 0x90
 8000fb8:	05db      	lsls	r3, r3, #23
 8000fba:	2200      	movs	r2, #0
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f000 fcaa 	bl	8001916 <HAL_GPIO_WritePin>
	  	  	  	 		  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <main+0xbe8>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	0019      	movs	r1, r3
 8000fcc:	f000 fca3 	bl	8001916 <HAL_GPIO_WritePin>
	  	  		  	  	  	  break;
 8000fd0:	46c0      	nop			; (mov r8, r8)
	  if(a==6){
 8000fd2:	f7ff fa30 	bl	8000436 <main+0x42>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	00009006 	.word	0x00009006
 8000fdc:	48000400 	.word	0x48000400
 8000fe0:	00001006 	.word	0x00001006
 8000fe4:	00001002 	.word	0x00001002
 8000fe8:	00008002 	.word	0x00008002
 8000fec:	00008006 	.word	0x00008006
 8000ff0:	00009002 	.word	0x00009002
 8000ff4:	00009007 	.word	0x00009007
 8000ff8:	0800233c 	.word	0x0800233c
 8000ffc:	00000818 	.word	0x00000818
 8001000:	08002364 	.word	0x08002364

08001004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b091      	sub	sp, #68	; 0x44
 8001008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100a:	2410      	movs	r4, #16
 800100c:	193b      	adds	r3, r7, r4
 800100e:	0018      	movs	r0, r3
 8001010:	2330      	movs	r3, #48	; 0x30
 8001012:	001a      	movs	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	f001 f931 	bl	800227c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101a:	003b      	movs	r3, r7
 800101c:	0018      	movs	r0, r3
 800101e:	2310      	movs	r3, #16
 8001020:	001a      	movs	r2, r3
 8001022:	2100      	movs	r1, #0
 8001024:	f001 f92a 	bl	800227c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001028:	0021      	movs	r1, r4
 800102a:	187b      	adds	r3, r7, r1
 800102c:	2202      	movs	r2, #2
 800102e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001030:	187b      	adds	r3, r7, r1
 8001032:	2201      	movs	r2, #1
 8001034:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2210      	movs	r2, #16
 800103a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2202      	movs	r2, #2
 8001040:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	22a0      	movs	r2, #160	; 0xa0
 800104c:	0392      	lsls	r2, r2, #14
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001056:	187b      	adds	r3, r7, r1
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fc9f 	bl	800199c <HAL_RCC_OscConfig>
 800105e:	1e03      	subs	r3, r0, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001062:	f000 f8c7 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	003b      	movs	r3, r7
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106c:	003b      	movs	r3, r7
 800106e:	2202      	movs	r2, #2
 8001070:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001072:	003b      	movs	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001078:	003b      	movs	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800107e:	003b      	movs	r3, r7
 8001080:	2101      	movs	r1, #1
 8001082:	0018      	movs	r0, r3
 8001084:	f000 ffa4 	bl	8001fd0 <HAL_RCC_ClockConfig>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800108c:	f000 f8b2 	bl	80011f4 <Error_Handler>
  }
}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b011      	add	sp, #68	; 0x44
 8001096:	bd90      	pop	{r4, r7, pc}

08001098 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109e:	240c      	movs	r4, #12
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	0018      	movs	r0, r3
 80010a4:	2314      	movs	r3, #20
 80010a6:	001a      	movs	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f001 f8e7 	bl	800227c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	03c9      	lsls	r1, r1, #15
 80010b8:	430a      	orrs	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010be:	695a      	ldr	r2, [r3, #20]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	03db      	lsls	r3, r3, #15
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b45      	ldr	r3, [pc, #276]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010d0:	2180      	movs	r1, #128	; 0x80
 80010d2:	0289      	lsls	r1, r1, #10
 80010d4:	430a      	orrs	r2, r1
 80010d6:	615a      	str	r2, [r3, #20]
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010da:	695a      	ldr	r2, [r3, #20]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b3e      	ldr	r3, [pc, #248]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010e8:	695a      	ldr	r2, [r3, #20]
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	02c9      	lsls	r1, r1, #11
 80010f0:	430a      	orrs	r2, r1
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <MX_GPIO_Init+0x148>)
 80010f6:	695a      	ldr	r2, [r3, #20]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	02db      	lsls	r3, r3, #11
 80010fc:	4013      	ands	r3, r2
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED5_Pin|LED4_Pin|DIG4_Pin|G_Pin
 8001102:	4938      	ldr	r1, [pc, #224]	; (80011e4 <MX_GPIO_Init+0x14c>)
 8001104:	2390      	movs	r3, #144	; 0x90
 8001106:	05db      	lsls	r3, r3, #23
 8001108:	2200      	movs	r2, #0
 800110a:	0018      	movs	r0, r3
 800110c:	f000 fc03 	bl	8001916 <HAL_GPIO_WritePin>
                          |C_Pin|A_Pin|DIG1_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_Pin|D_Pin|E_Pin|LED3_Pin
 8001110:	4935      	ldr	r1, [pc, #212]	; (80011e8 <MX_GPIO_Init+0x150>)
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <MX_GPIO_Init+0x154>)
 8001114:	2200      	movs	r2, #0
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fbfd 	bl	8001916 <HAL_GPIO_WritePin>
                          |LED2_Pin|B_Pin|DIG3_Pin|DIG2_Pin
                          |F_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ENCODER_SW_Pin ENCB_Pin */
  GPIO_InitStruct.Pin = ENCODER_SW_Pin|ENCB_Pin;
 800111c:	193b      	adds	r3, r7, r4
 800111e:	2205      	movs	r2, #5
 8001120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	193a      	adds	r2, r7, r4
 8001130:	2390      	movs	r3, #144	; 0x90
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	0011      	movs	r1, r2
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fa60 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCA_Pin */
  GPIO_InitStruct.Pin = ENCA_Pin;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	2202      	movs	r2, #2
 8001140:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	22c4      	movs	r2, #196	; 0xc4
 8001146:	0392      	lsls	r2, r2, #14
 8001148:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	193b      	adds	r3, r7, r4
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENCA_GPIO_Port, &GPIO_InitStruct);
 8001150:	193a      	adds	r2, r7, r4
 8001152:	2390      	movs	r3, #144	; 0x90
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fa4f 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED5_Pin LED4_Pin DIG4_Pin G_Pin
                           C_Pin A_Pin DIG1_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED5_Pin|LED4_Pin|DIG4_Pin|G_Pin
 800115e:	193b      	adds	r3, r7, r4
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <MX_GPIO_Init+0x14c>)
 8001162:	601a      	str	r2, [r3, #0]
                          |C_Pin|A_Pin|DIG1_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	193b      	adds	r3, r7, r4
 8001166:	2201      	movs	r2, #1
 8001168:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	193a      	adds	r2, r7, r4
 8001178:	2390      	movs	r3, #144	; 0x90
 800117a:	05db      	lsls	r3, r3, #23
 800117c:	0011      	movs	r1, r2
 800117e:	0018      	movs	r0, r3
 8001180:	f000 fa3c 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : DP_Pin D_Pin E_Pin LED3_Pin
                           LED2_Pin B_Pin DIG3_Pin DIG2_Pin
                           F_Pin */
  GPIO_InitStruct.Pin = DP_Pin|D_Pin|E_Pin|LED3_Pin
 8001184:	193b      	adds	r3, r7, r4
 8001186:	4a18      	ldr	r2, [pc, #96]	; (80011e8 <MX_GPIO_Init+0x150>)
 8001188:	601a      	str	r2, [r3, #0]
                          |LED2_Pin|B_Pin|DIG3_Pin|DIG2_Pin
                          |F_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	193b      	adds	r3, r7, r4
 800118c:	2201      	movs	r2, #1
 800118e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	193b      	adds	r3, r7, r4
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	193b      	adds	r3, r7, r4
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	193b      	adds	r3, r7, r4
 800119e:	4a13      	ldr	r2, [pc, #76]	; (80011ec <MX_GPIO_Init+0x154>)
 80011a0:	0019      	movs	r1, r3
 80011a2:	0010      	movs	r0, r2
 80011a4:	f000 fa2a 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT_Pin */
  GPIO_InitStruct.Pin = BUT_Pin;
 80011a8:	0021      	movs	r1, r4
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	187b      	adds	r3, r7, r1
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUT_GPIO_Port, &GPIO_InitStruct);
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	4a0c      	ldr	r2, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x158>)
 80011c0:	0019      	movs	r1, r3
 80011c2:	0010      	movs	r0, r2
 80011c4:	f000 fa1a 	bl	80015fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	2005      	movs	r0, #5
 80011ce:	f000 f9e3 	bl	8001598 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f000 f9f5 	bl	80015c2 <HAL_NVIC_EnableIRQ>

}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b009      	add	sp, #36	; 0x24
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	00000bf8 	.word	0x00000bf8
 80011e8:	0000fc07 	.word	0x0000fc07
 80011ec:	48000400 	.word	0x48000400
 80011f0:	48001400 	.word	0x48001400

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001206:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <HAL_MspInit+0x44>)
 8001208:	699a      	ldr	r2, [r3, #24]
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_MspInit+0x44>)
 800120c:	2101      	movs	r1, #1
 800120e:	430a      	orrs	r2, r1
 8001210:	619a      	str	r2, [r3, #24]
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_MspInit+0x44>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	2201      	movs	r2, #1
 8001218:	4013      	ands	r3, r2
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x44>)
 8001220:	69da      	ldr	r2, [r3, #28]
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_MspInit+0x44>)
 8001224:	2180      	movs	r1, #128	; 0x80
 8001226:	0549      	lsls	r1, r1, #21
 8001228:	430a      	orrs	r2, r1
 800122a:	61da      	str	r2, [r3, #28]
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_MspInit+0x44>)
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	2380      	movs	r3, #128	; 0x80
 8001232:	055b      	lsls	r3, r3, #21
 8001234:	4013      	ands	r3, r2
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40021000 	.word	0x40021000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f8a8 	bl	80013c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOA, ENCA_Pin)== GPIO_PIN_RESET){
 800127c:	2390      	movs	r3, #144	; 0x90
 800127e:	05db      	lsls	r3, r3, #23
 8001280:	2102      	movs	r1, #2
 8001282:	0018      	movs	r0, r3
 8001284:	f000 fb2a 	bl	80018dc <HAL_GPIO_ReadPin>
 8001288:	1e03      	subs	r3, r0, #0
 800128a:	d102      	bne.n	8001292 <EXTI0_1_IRQHandler+0x1a>
		  		  			  v=0;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <EXTI0_1_IRQHandler+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
		  		  		 }
		  	if(v==0){
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <EXTI0_1_IRQHandler+0x50>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d110      	bne.n	80012bc <EXTI0_1_IRQHandler+0x44>
		  		  			if(HAL_GPIO_ReadPin(GPIOA, ENCA_Pin)== GPIO_PIN_SET){
 800129a:	2390      	movs	r3, #144	; 0x90
 800129c:	05db      	lsls	r3, r3, #23
 800129e:	2102      	movs	r1, #2
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 fb1b 	bl	80018dc <HAL_GPIO_ReadPin>
 80012a6:	0003      	movs	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d107      	bne.n	80012bc <EXTI0_1_IRQHandler+0x44>
		  		  				  			  c++;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <EXTI0_1_IRQHandler+0x54>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <EXTI0_1_IRQHandler+0x54>)
 80012b4:	601a      	str	r2, [r3, #0]
		  		  				  			  v=1;
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <EXTI0_1_IRQHandler+0x50>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
		  		  				  	  }
		  	}
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCA_Pin);
 80012bc:	2002      	movs	r0, #2
 80012be:	f000 fb47 	bl	8001950 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	2000002c 	.word	0x2000002c

080012d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012dc:	480d      	ldr	r0, [pc, #52]	; (8001314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e2:	490e      	ldr	r1, [pc, #56]	; (800131c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e4:	4a0e      	ldr	r2, [pc, #56]	; (8001320 <LoopForever+0xe>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f8:	4c0b      	ldr	r4, [pc, #44]	; (8001328 <LoopForever+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001306:	f7ff ffe3 	bl	80012d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800130a:	f000 ff93 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130e:	f7ff f871 	bl	80003f4 <main>

08001312 <LoopForever>:

LoopForever:
    b LoopForever
 8001312:	e7fe      	b.n	8001312 <LoopForever>
  ldr   r0, =_estack
 8001314:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800131c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001320:	08002394 	.word	0x08002394
  ldr r2, =_sbss
 8001324:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001328:	20000034 	.word	0x20000034

0800132c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800132c:	e7fe      	b.n	800132c <ADC1_IRQHandler>
	...

08001330 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <HAL_Init+0x24>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_Init+0x24>)
 800133a:	2110      	movs	r1, #16
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f809 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001346:	f7ff ff5b 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_InitTick+0x5c>)
 8001362:	681c      	ldr	r4, [r3, #0]
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_InitTick+0x60>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	0019      	movs	r1, r3
 800136a:	23fa      	movs	r3, #250	; 0xfa
 800136c:	0098      	lsls	r0, r3, #2
 800136e:	f7fe fecb 	bl	8000108 <__udivsi3>
 8001372:	0003      	movs	r3, r0
 8001374:	0019      	movs	r1, r3
 8001376:	0020      	movs	r0, r4
 8001378:	f7fe fec6 	bl	8000108 <__udivsi3>
 800137c:	0003      	movs	r3, r0
 800137e:	0018      	movs	r0, r3
 8001380:	f000 f92f 	bl	80015e2 <HAL_SYSTICK_Config>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e00f      	b.n	80013ac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d80b      	bhi.n	80013aa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	2301      	movs	r3, #1
 8001396:	425b      	negs	r3, r3
 8001398:	2200      	movs	r2, #0
 800139a:	0018      	movs	r0, r3
 800139c:	f000 f8fc 	bl	8001598 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_InitTick+0x64>)
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	e000      	b.n	80013ac <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b003      	add	sp, #12
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	20000004 	.word	0x20000004
 80013b8:	2000000c 	.word	0x2000000c
 80013bc:	20000008 	.word	0x20000008

080013c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_IncTick+0x1c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	001a      	movs	r2, r3
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x20>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	18d2      	adds	r2, r2, r3
 80013d0:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_IncTick+0x20>)
 80013d2:	601a      	str	r2, [r3, #0]
}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	2000000c 	.word	0x2000000c
 80013e0:	20000030 	.word	0x20000030

080013e4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <HAL_GetTick+0x10>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	20000030 	.word	0x20000030

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff fff0 	bl	80013e4 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	001a      	movs	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	189b      	adds	r3, r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	f7ff ffe0 	bl	80013e4 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	46c0      	nop			; (mov r8, r8)
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b004      	add	sp, #16
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	2000000c 	.word	0x2000000c

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	0002      	movs	r2, r0
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b7f      	cmp	r3, #127	; 0x7f
 8001452:	d809      	bhi.n	8001468 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	001a      	movs	r2, r3
 800145a:	231f      	movs	r3, #31
 800145c:	401a      	ands	r2, r3
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_EnableIRQ+0x30>)
 8001460:	2101      	movs	r1, #1
 8001462:	4091      	lsls	r1, r2
 8001464:	000a      	movs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]
  }
}
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b002      	add	sp, #8
 800146e:	bd80      	pop	{r7, pc}
 8001470:	e000e100 	.word	0xe000e100

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b590      	push	{r4, r7, lr}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b7f      	cmp	r3, #127	; 0x7f
 8001488:	d828      	bhi.n	80014dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148a:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <__NVIC_SetPriority+0xd4>)
 800148c:	1dfb      	adds	r3, r7, #7
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b25b      	sxtb	r3, r3
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	33c0      	adds	r3, #192	; 0xc0
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	589b      	ldr	r3, [r3, r2]
 800149a:	1dfa      	adds	r2, r7, #7
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	0011      	movs	r1, r2
 80014a0:	2203      	movs	r2, #3
 80014a2:	400a      	ands	r2, r1
 80014a4:	00d2      	lsls	r2, r2, #3
 80014a6:	21ff      	movs	r1, #255	; 0xff
 80014a8:	4091      	lsls	r1, r2
 80014aa:	000a      	movs	r2, r1
 80014ac:	43d2      	mvns	r2, r2
 80014ae:	401a      	ands	r2, r3
 80014b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	019b      	lsls	r3, r3, #6
 80014b6:	22ff      	movs	r2, #255	; 0xff
 80014b8:	401a      	ands	r2, r3
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	0018      	movs	r0, r3
 80014c0:	2303      	movs	r3, #3
 80014c2:	4003      	ands	r3, r0
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c8:	481f      	ldr	r0, [pc, #124]	; (8001548 <__NVIC_SetPriority+0xd4>)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	430a      	orrs	r2, r1
 80014d4:	33c0      	adds	r3, #192	; 0xc0
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014da:	e031      	b.n	8001540 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014dc:	4a1b      	ldr	r2, [pc, #108]	; (800154c <__NVIC_SetPriority+0xd8>)
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0019      	movs	r1, r3
 80014e4:	230f      	movs	r3, #15
 80014e6:	400b      	ands	r3, r1
 80014e8:	3b08      	subs	r3, #8
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3306      	adds	r3, #6
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	3304      	adds	r3, #4
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	1dfa      	adds	r2, r7, #7
 80014f8:	7812      	ldrb	r2, [r2, #0]
 80014fa:	0011      	movs	r1, r2
 80014fc:	2203      	movs	r2, #3
 80014fe:	400a      	ands	r2, r1
 8001500:	00d2      	lsls	r2, r2, #3
 8001502:	21ff      	movs	r1, #255	; 0xff
 8001504:	4091      	lsls	r1, r2
 8001506:	000a      	movs	r2, r1
 8001508:	43d2      	mvns	r2, r2
 800150a:	401a      	ands	r2, r3
 800150c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	019b      	lsls	r3, r3, #6
 8001512:	22ff      	movs	r2, #255	; 0xff
 8001514:	401a      	ands	r2, r3
 8001516:	1dfb      	adds	r3, r7, #7
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	0018      	movs	r0, r3
 800151c:	2303      	movs	r3, #3
 800151e:	4003      	ands	r3, r0
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <__NVIC_SetPriority+0xd8>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	001c      	movs	r4, r3
 800152c:	230f      	movs	r3, #15
 800152e:	4023      	ands	r3, r4
 8001530:	3b08      	subs	r3, #8
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	430a      	orrs	r2, r1
 8001536:	3306      	adds	r3, #6
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	18c3      	adds	r3, r0, r3
 800153c:	3304      	adds	r3, #4
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b003      	add	sp, #12
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	e000e100 	.word	0xe000e100
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	045b      	lsls	r3, r3, #17
 8001560:	429a      	cmp	r2, r3
 8001562:	d301      	bcc.n	8001568 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001564:	2301      	movs	r3, #1
 8001566:	e010      	b.n	800158a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001568:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <SysTick_Config+0x44>)
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	3a01      	subs	r2, #1
 800156e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001570:	2301      	movs	r3, #1
 8001572:	425b      	negs	r3, r3
 8001574:	2103      	movs	r1, #3
 8001576:	0018      	movs	r0, r3
 8001578:	f7ff ff7c 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <SysTick_Config+0x44>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001582:	4b04      	ldr	r3, [pc, #16]	; (8001594 <SysTick_Config+0x44>)
 8001584:	2207      	movs	r2, #7
 8001586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b002      	add	sp, #8
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	e000e010 	.word	0xe000e010

08001598 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	210f      	movs	r1, #15
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	1c02      	adds	r2, r0, #0
 80015a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b25b      	sxtb	r3, r3
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	0002      	movs	r2, r0
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	0018      	movs	r0, r3
 80015d6:	f7ff ff33 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	46bd      	mov	sp, r7
 80015de:	b002      	add	sp, #8
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	0018      	movs	r0, r3
 80015ee:	f7ff ffaf 	bl	8001550 <SysTick_Config>
 80015f2:	0003      	movs	r3, r0
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e14f      	b.n	80018ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4091      	lsls	r1, r2
 8001616:	000a      	movs	r2, r1
 8001618:	4013      	ands	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d100      	bne.n	8001624 <HAL_GPIO_Init+0x28>
 8001622:	e140      	b.n	80018a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	2203      	movs	r2, #3
 800162a:	4013      	ands	r3, r2
 800162c:	2b01      	cmp	r3, #1
 800162e:	d005      	beq.n	800163c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2203      	movs	r2, #3
 8001636:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001638:	2b02      	cmp	r3, #2
 800163a:	d130      	bne.n	800169e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	409a      	lsls	r2, r3
 800164a:	0013      	movs	r3, r2
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	409a      	lsls	r2, r3
 800165e:	0013      	movs	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001672:	2201      	movs	r2, #1
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
 8001678:	0013      	movs	r3, r2
 800167a:	43da      	mvns	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	091b      	lsrs	r3, r3, #4
 8001688:	2201      	movs	r2, #1
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d017      	beq.n	80016da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	2203      	movs	r2, #3
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	43da      	mvns	r2, r3
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	4013      	ands	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2203      	movs	r2, #3
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d123      	bne.n	800172e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	08da      	lsrs	r2, r3, #3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3208      	adds	r2, #8
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	58d3      	ldr	r3, [r2, r3]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2207      	movs	r2, #7
 80016f8:	4013      	ands	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	220f      	movs	r2, #15
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	43da      	mvns	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2107      	movs	r1, #7
 8001712:	400b      	ands	r3, r1
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	409a      	lsls	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	6939      	ldr	r1, [r7, #16]
 800172c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	401a      	ands	r2, r3
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	23c0      	movs	r3, #192	; 0xc0
 8001768:	029b      	lsls	r3, r3, #10
 800176a:	4013      	ands	r3, r2
 800176c:	d100      	bne.n	8001770 <HAL_GPIO_Init+0x174>
 800176e:	e09a      	b.n	80018a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001770:	4b54      	ldr	r3, [pc, #336]	; (80018c4 <HAL_GPIO_Init+0x2c8>)
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	4b53      	ldr	r3, [pc, #332]	; (80018c4 <HAL_GPIO_Init+0x2c8>)
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	619a      	str	r2, [r3, #24]
 800177c:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_GPIO_Init+0x2c8>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	2201      	movs	r2, #1
 8001782:	4013      	ands	r3, r2
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x2cc>)
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	089b      	lsrs	r3, r3, #2
 800178e:	3302      	adds	r3, #2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	589b      	ldr	r3, [r3, r2]
 8001794:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2203      	movs	r2, #3
 800179a:	4013      	ands	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	220f      	movs	r2, #15
 80017a0:	409a      	lsls	r2, r3
 80017a2:	0013      	movs	r3, r2
 80017a4:	43da      	mvns	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	2390      	movs	r3, #144	; 0x90
 80017b0:	05db      	lsls	r3, r3, #23
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_Init+0x1e2>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a44      	ldr	r2, [pc, #272]	; (80018cc <HAL_GPIO_Init+0x2d0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_Init+0x1de>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a43      	ldr	r2, [pc, #268]	; (80018d0 <HAL_GPIO_Init+0x2d4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_Init+0x1da>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a42      	ldr	r2, [pc, #264]	; (80018d4 <HAL_GPIO_Init+0x2d8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_Init+0x1d6>
 80017ce:	2303      	movs	r3, #3
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x1e4>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e004      	b.n	80017e0 <HAL_GPIO_Init+0x1e4>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e002      	b.n	80017e0 <HAL_GPIO_Init+0x1e4>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_GPIO_Init+0x1e4>
 80017de:	2300      	movs	r3, #0
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	2103      	movs	r1, #3
 80017e4:	400a      	ands	r2, r1
 80017e6:	0092      	lsls	r2, r2, #2
 80017e8:	4093      	lsls	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f0:	4935      	ldr	r1, [pc, #212]	; (80018c8 <HAL_GPIO_Init+0x2cc>)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	089b      	lsrs	r3, r3, #2
 80017f6:	3302      	adds	r3, #2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	43da      	mvns	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	025b      	lsls	r3, r3, #9
 8001816:	4013      	ands	r3, r2
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4313      	orrs	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	43da      	mvns	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	029b      	lsls	r3, r3, #10
 8001840:	4013      	ands	r3, r2
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001852:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43da      	mvns	r2, r3
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	035b      	lsls	r3, r3, #13
 800186a:	4013      	ands	r3, r2
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001876:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800187c:	4b16      	ldr	r3, [pc, #88]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	43da      	mvns	r2, r3
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	4013      	ands	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	039b      	lsls	r3, r3, #14
 8001894:	4013      	ands	r3, r2
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_GPIO_Init+0x2dc>)
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3301      	adds	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	40da      	lsrs	r2, r3
 80018b4:	1e13      	subs	r3, r2, #0
 80018b6:	d000      	beq.n	80018ba <HAL_GPIO_Init+0x2be>
 80018b8:	e6a8      	b.n	800160c <HAL_GPIO_Init+0x10>
  } 
}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46c0      	nop			; (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b006      	add	sp, #24
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40010000 	.word	0x40010000
 80018cc:	48000400 	.word	0x48000400
 80018d0:	48000800 	.word	0x48000800
 80018d4:	48000c00 	.word	0x48000c00
 80018d8:	40010400 	.word	0x40010400

080018dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	000a      	movs	r2, r1
 80018e6:	1cbb      	adds	r3, r7, #2
 80018e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	1cba      	adds	r2, r7, #2
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	4013      	ands	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80018f6:	230f      	movs	r3, #15
 80018f8:	18fb      	adds	r3, r7, r3
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e003      	b.n	8001908 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001900:	230f      	movs	r3, #15
 8001902:	18fb      	adds	r3, r7, r3
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001908:	230f      	movs	r3, #15
 800190a:	18fb      	adds	r3, r7, r3
 800190c:	781b      	ldrb	r3, [r3, #0]
  }
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b004      	add	sp, #16
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	0008      	movs	r0, r1
 8001920:	0011      	movs	r1, r2
 8001922:	1cbb      	adds	r3, r7, #2
 8001924:	1c02      	adds	r2, r0, #0
 8001926:	801a      	strh	r2, [r3, #0]
 8001928:	1c7b      	adds	r3, r7, #1
 800192a:	1c0a      	adds	r2, r1, #0
 800192c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800192e:	1c7b      	adds	r3, r7, #1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001936:	1cbb      	adds	r3, r7, #2
 8001938:	881a      	ldrh	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800193e:	e003      	b.n	8001948 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b002      	add	sp, #8
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	0002      	movs	r2, r0
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800195c:	4b09      	ldr	r3, [pc, #36]	; (8001984 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	1dba      	adds	r2, r7, #6
 8001962:	8812      	ldrh	r2, [r2, #0]
 8001964:	4013      	ands	r3, r2
 8001966:	d008      	beq.n	800197a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800196a:	1dba      	adds	r2, r7, #6
 800196c:	8812      	ldrh	r2, [r2, #0]
 800196e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001970:	1dbb      	adds	r3, r7, #6
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	0018      	movs	r0, r3
 8001976:	f000 f807 	bl	8001988 <HAL_GPIO_EXTI_Callback>
  }
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	40010400 	.word	0x40010400

08001988 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	0002      	movs	r2, r0
 8001990:	1dbb      	adds	r3, r7, #6
 8001992:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b088      	sub	sp, #32
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e301      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d100      	bne.n	80019ba <HAL_RCC_OscConfig+0x1e>
 80019b8:	e08d      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019ba:	4bc3      	ldr	r3, [pc, #780]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	220c      	movs	r2, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b04      	cmp	r3, #4
 80019c4:	d00e      	beq.n	80019e4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c6:	4bc0      	ldr	r3, [pc, #768]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	220c      	movs	r2, #12
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x64>
 80019d2:	4bbd      	ldr	r3, [pc, #756]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	401a      	ands	r2, r3
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d10d      	bne.n	8001a00 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	4bb8      	ldr	r3, [pc, #736]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d100      	bne.n	80019f2 <HAL_RCC_OscConfig+0x56>
 80019f0:	e070      	b.n	8001ad4 <HAL_RCC_OscConfig+0x138>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d000      	beq.n	80019fc <HAL_RCC_OscConfig+0x60>
 80019fa:	e06b      	b.n	8001ad4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e2d8      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d107      	bne.n	8001a18 <HAL_RCC_OscConfig+0x7c>
 8001a08:	4baf      	ldr	r3, [pc, #700]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4bae      	ldr	r3, [pc, #696]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0249      	lsls	r1, r1, #9
 8001a12:	430a      	orrs	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	e02f      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10c      	bne.n	8001a3a <HAL_RCC_OscConfig+0x9e>
 8001a20:	4ba9      	ldr	r3, [pc, #676]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4ba8      	ldr	r3, [pc, #672]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a26:	49a9      	ldr	r1, [pc, #676]	; (8001ccc <HAL_RCC_OscConfig+0x330>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4ba6      	ldr	r3, [pc, #664]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4ba5      	ldr	r3, [pc, #660]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	49a7      	ldr	r1, [pc, #668]	; (8001cd0 <HAL_RCC_OscConfig+0x334>)
 8001a34:	400a      	ands	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e01e      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d10e      	bne.n	8001a60 <HAL_RCC_OscConfig+0xc4>
 8001a42:	4ba1      	ldr	r3, [pc, #644]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	4ba0      	ldr	r3, [pc, #640]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	02c9      	lsls	r1, r1, #11
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	4b9c      	ldr	r3, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	2180      	movs	r1, #128	; 0x80
 8001a58:	0249      	lsls	r1, r1, #9
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xdc>
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	4b98      	ldr	r3, [pc, #608]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a66:	4999      	ldr	r1, [pc, #612]	; (8001ccc <HAL_RCC_OscConfig+0x330>)
 8001a68:	400a      	ands	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	4b96      	ldr	r3, [pc, #600]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a72:	4997      	ldr	r1, [pc, #604]	; (8001cd0 <HAL_RCC_OscConfig+0x334>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d014      	beq.n	8001aaa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fcb0 	bl	80013e4 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a8a:	f7ff fcab 	bl	80013e4 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b64      	cmp	r3, #100	; 0x64
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e28a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9c:	4b8a      	ldr	r3, [pc, #552]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0xee>
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff fc9b 	bl	80013e4 <HAL_GetTick>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab4:	f7ff fc96 	bl	80013e4 <HAL_GetTick>
 8001ab8:	0002      	movs	r2, r0
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b64      	cmp	r3, #100	; 0x64
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e275      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	029b      	lsls	r3, r3, #10
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x118>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2202      	movs	r2, #2
 8001adc:	4013      	ands	r3, r2
 8001ade:	d100      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x146>
 8001ae0:	e069      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ae2:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d00b      	beq.n	8001b04 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aec:	4b76      	ldr	r3, [pc, #472]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	220c      	movs	r2, #12
 8001af2:	4013      	ands	r3, r2
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d11c      	bne.n	8001b32 <HAL_RCC_OscConfig+0x196>
 8001af8:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	025b      	lsls	r3, r3, #9
 8001b00:	4013      	ands	r3, r2
 8001b02:	d116      	bne.n	8001b32 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b04:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x17e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e24b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	22f8      	movs	r2, #248	; 0xf8
 8001b20:	4393      	bics	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	00da      	lsls	r2, r3, #3
 8001b2a:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b30:	e041      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d024      	beq.n	8001b84 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc4d 	bl	80013e4 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b50:	f7ff fc48 	bl	80013e4 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e227      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b62:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2202      	movs	r2, #2
 8001b68:	4013      	ands	r3, r2
 8001b6a:	d0f1      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	22f8      	movs	r2, #248	; 0xf8
 8001b72:	4393      	bics	r3, r2
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	00da      	lsls	r2, r3, #3
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e018      	b.n	8001bb6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b84:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fc28 	bl	80013e4 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff fc23 	bl	80013e4 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e202      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d1f1      	bne.n	8001b9a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2208      	movs	r2, #8
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d036      	beq.n	8001c2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d019      	beq.n	8001bfc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bce:	2101      	movs	r1, #1
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fc06 	bl	80013e4 <HAL_GetTick>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bde:	f7ff fc01 	bl	80013e4 <HAL_GetTick>
 8001be2:	0002      	movs	r2, r0
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e1e0      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f1      	beq.n	8001bde <HAL_RCC_OscConfig+0x242>
 8001bfa:	e018      	b.n	8001c2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	438a      	bics	r2, r1
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c08:	f7ff fbec 	bl	80013e4 <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c12:	f7ff fbe7 	bl	80013e4 <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e1c6      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d1f1      	bne.n	8001c12 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2204      	movs	r2, #4
 8001c34:	4013      	ands	r3, r2
 8001c36:	d100      	bne.n	8001c3a <HAL_RCC_OscConfig+0x29e>
 8001c38:	e0b4      	b.n	8001da4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	201f      	movs	r0, #31
 8001c3c:	183b      	adds	r3, r7, r0
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c44:	69da      	ldr	r2, [r3, #28]
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	055b      	lsls	r3, r3, #21
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d110      	bne.n	8001c70 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	2180      	movs	r1, #128	; 0x80
 8001c56:	0549      	lsls	r1, r1, #21
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	61da      	str	r2, [r3, #28]
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	69da      	ldr	r2, [r3, #28]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	055b      	lsls	r3, r3, #21
 8001c64:	4013      	ands	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d11a      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001c82:	2180      	movs	r1, #128	; 0x80
 8001c84:	0049      	lsls	r1, r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8a:	f7ff fbab 	bl	80013e4 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c94:	f7ff fba6 	bl	80013e4 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b64      	cmp	r3, #100	; 0x64
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e185      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_RCC_OscConfig+0x338>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f0      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x33c>
 8001cba:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	6a1a      	ldr	r2, [r3, #32]
 8001cbe:	4b02      	ldr	r3, [pc, #8]	; (8001cc8 <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	621a      	str	r2, [r3, #32]
 8001cc6:	e035      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	fffeffff 	.word	0xfffeffff
 8001cd0:	fffbffff 	.word	0xfffbffff
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x35e>
 8001ce0:	4bb6      	ldr	r3, [pc, #728]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ce2:	6a1a      	ldr	r2, [r3, #32]
 8001ce4:	4bb5      	ldr	r3, [pc, #724]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	438a      	bics	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]
 8001cec:	4bb3      	ldr	r3, [pc, #716]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001cee:	6a1a      	ldr	r2, [r3, #32]
 8001cf0:	4bb2      	ldr	r3, [pc, #712]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	621a      	str	r2, [r3, #32]
 8001cf8:	e01c      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b05      	cmp	r3, #5
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x380>
 8001d02:	4bae      	ldr	r3, [pc, #696]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d04:	6a1a      	ldr	r2, [r3, #32]
 8001d06:	4bad      	ldr	r3, [pc, #692]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d08:	2104      	movs	r1, #4
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	621a      	str	r2, [r3, #32]
 8001d0e:	4bab      	ldr	r3, [pc, #684]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d10:	6a1a      	ldr	r2, [r3, #32]
 8001d12:	4baa      	ldr	r3, [pc, #680]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	430a      	orrs	r2, r1
 8001d18:	621a      	str	r2, [r3, #32]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x398>
 8001d1c:	4ba7      	ldr	r3, [pc, #668]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d1e:	6a1a      	ldr	r2, [r3, #32]
 8001d20:	4ba6      	ldr	r3, [pc, #664]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	438a      	bics	r2, r1
 8001d26:	621a      	str	r2, [r3, #32]
 8001d28:	4ba4      	ldr	r3, [pc, #656]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d2a:	6a1a      	ldr	r2, [r3, #32]
 8001d2c:	4ba3      	ldr	r3, [pc, #652]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d2e:	2104      	movs	r1, #4
 8001d30:	438a      	bics	r2, r1
 8001d32:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d014      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fb52 	bl	80013e4 <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	e009      	b.n	8001d5a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d46:	f7ff fb4d 	bl	80013e4 <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	4a9b      	ldr	r2, [pc, #620]	; (8001fc0 <HAL_RCC_OscConfig+0x624>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e12b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5a:	4b98      	ldr	r3, [pc, #608]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3aa>
 8001d64:	e013      	b.n	8001d8e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff fb3d 	bl	80013e4 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6e:	e009      	b.n	8001d84 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d70:	f7ff fb38 	bl	80013e4 <HAL_GetTick>
 8001d74:	0002      	movs	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	4a91      	ldr	r2, [pc, #580]	; (8001fc0 <HAL_RCC_OscConfig+0x624>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e116      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d84:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	2202      	movs	r2, #2
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d8e:	231f      	movs	r3, #31
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d105      	bne.n	8001da4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d98:	4b88      	ldr	r3, [pc, #544]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	4b87      	ldr	r3, [pc, #540]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001d9e:	4989      	ldr	r1, [pc, #548]	; (8001fc4 <HAL_RCC_OscConfig+0x628>)
 8001da0:	400a      	ands	r2, r1
 8001da2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2210      	movs	r2, #16
 8001daa:	4013      	ands	r3, r2
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d12a      	bne.n	8001e0c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001db6:	4b81      	ldr	r3, [pc, #516]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dba:	4b80      	ldr	r3, [pc, #512]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dbc:	2104      	movs	r1, #4
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dc2:	4b7e      	ldr	r3, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc6:	4b7d      	ldr	r3, [pc, #500]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dc8:	2101      	movs	r1, #1
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dce:	f7ff fb09 	bl	80013e4 <HAL_GetTick>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dd8:	f7ff fb04 	bl	80013e4 <HAL_GetTick>
 8001ddc:	0002      	movs	r2, r0
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0e3      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dea:	4b74      	ldr	r3, [pc, #464]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	2202      	movs	r2, #2
 8001df0:	4013      	ands	r3, r2
 8001df2:	d0f1      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001df4:	4b71      	ldr	r3, [pc, #452]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df8:	22f8      	movs	r2, #248	; 0xf8
 8001dfa:	4393      	bics	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	00da      	lsls	r2, r3, #3
 8001e04:	4b6d      	ldr	r3, [pc, #436]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	635a      	str	r2, [r3, #52]	; 0x34
 8001e0a:	e034      	b.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	3305      	adds	r3, #5
 8001e12:	d111      	bne.n	8001e38 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e14:	4b69      	ldr	r3, [pc, #420]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e1a:	2104      	movs	r1, #4
 8001e1c:	438a      	bics	r2, r1
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e20:	4b66      	ldr	r3, [pc, #408]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e24:	22f8      	movs	r2, #248	; 0xf8
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	00da      	lsls	r2, r3, #3
 8001e30:	4b62      	ldr	r3, [pc, #392]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e38:	4b60      	ldr	r3, [pc, #384]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e3c:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e3e:	2104      	movs	r1, #4
 8001e40:	430a      	orrs	r2, r1
 8001e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e44:	4b5d      	ldr	r3, [pc, #372]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e48:	4b5c      	ldr	r3, [pc, #368]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff fac8 	bl	80013e4 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e5a:	f7ff fac3 	bl	80013e4 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0a2      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e6c:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d1f1      	bne.n	8001e5a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d100      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4e4>
 8001e7e:	e097      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e80:	4b4e      	ldr	r3, [pc, #312]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d100      	bne.n	8001e8e <HAL_RCC_OscConfig+0x4f2>
 8001e8c:	e06b      	b.n	8001f66 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d14c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e96:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b48      	ldr	r3, [pc, #288]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001e9c:	494a      	ldr	r1, [pc, #296]	; (8001fc8 <HAL_RCC_OscConfig+0x62c>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7ff fa9f 	bl	80013e4 <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff fa9a 	bl	80013e4 <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e079      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ebe:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	2380      	movs	r3, #128	; 0x80
 8001ec4:	049b      	lsls	r3, r3, #18
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eca:	4b3c      	ldr	r3, [pc, #240]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ece:	220f      	movs	r2, #15
 8001ed0:	4393      	bics	r3, r2
 8001ed2:	0019      	movs	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001eda:	430a      	orrs	r2, r1
 8001edc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a3a      	ldr	r2, [pc, #232]	; (8001fcc <HAL_RCC_OscConfig+0x630>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	4b32      	ldr	r3, [pc, #200]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef8:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b2f      	ldr	r3, [pc, #188]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0449      	lsls	r1, r1, #17
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7ff fa6d 	bl	80013e4 <HAL_GetTick>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff fa68 	bl	80013e4 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e047      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	049b      	lsls	r3, r3, #18
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x574>
 8001f2e:	e03f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f36:	4924      	ldr	r1, [pc, #144]	; (8001fc8 <HAL_RCC_OscConfig+0x62c>)
 8001f38:	400a      	ands	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fa52 	bl	80013e4 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa4d 	bl	80013e4 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e02c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	049b      	lsls	r3, r3, #18
 8001f60:	4013      	ands	r3, r2
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x5aa>
 8001f64:	e024      	b.n	8001fb0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a1b      	ldr	r3, [r3, #32]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e01f      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x620>)
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	025b      	lsls	r3, r3, #9
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d10e      	bne.n	8001fac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	220f      	movs	r2, #15
 8001f92:	401a      	ands	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	23f0      	movs	r3, #240	; 0xf0
 8001fa0:	039b      	lsls	r3, r3, #14
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b008      	add	sp, #32
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	00001388 	.word	0x00001388
 8001fc4:	efffffff 	.word	0xefffffff
 8001fc8:	feffffff 	.word	0xfeffffff
 8001fcc:	ffc2ffff 	.word	0xffc2ffff

08001fd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0b3      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d911      	bls.n	8002016 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	4393      	bics	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e09a      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d015      	beq.n	800204c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2204      	movs	r2, #4
 8002026:	4013      	ands	r3, r2
 8002028:	d006      	beq.n	8002038 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800202a:	4b4b      	ldr	r3, [pc, #300]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	4b4a      	ldr	r3, [pc, #296]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002030:	21e0      	movs	r1, #224	; 0xe0
 8002032:	00c9      	lsls	r1, r1, #3
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b47      	ldr	r3, [pc, #284]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	22f0      	movs	r2, #240	; 0xf0
 800203e:	4393      	bics	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	4b44      	ldr	r3, [pc, #272]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002048:	430a      	orrs	r2, r1
 800204a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	d040      	beq.n	80020d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b3e      	ldr	r3, [pc, #248]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	2380      	movs	r3, #128	; 0x80
 8002064:	029b      	lsls	r3, r3, #10
 8002066:	4013      	ands	r3, r2
 8002068:	d114      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06e      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d107      	bne.n	8002086 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	049b      	lsls	r3, r3, #18
 800207e:	4013      	ands	r3, r2
 8002080:	d108      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e062      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4b34      	ldr	r3, [pc, #208]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2202      	movs	r2, #2
 800208c:	4013      	ands	r3, r2
 800208e:	d101      	bne.n	8002094 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e05b      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002094:	4b30      	ldr	r3, [pc, #192]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2203      	movs	r2, #3
 800209a:	4393      	bics	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff f99c 	bl	80013e4 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b0:	e009      	b.n	80020c6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f7ff f997 	bl	80013e4 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_RCC_ClockConfig+0x18c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e042      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	220c      	movs	r2, #12
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1ec      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020d8:	4b1e      	ldr	r3, [pc, #120]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d211      	bcs.n	800210a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4393      	bics	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <HAL_RCC_ClockConfig+0x184>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4013      	ands	r3, r2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e020      	b.n	800214c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2204      	movs	r2, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a11      	ldr	r2, [pc, #68]	; (8002160 <HAL_RCC_ClockConfig+0x190>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002128:	f000 f820 	bl	800216c <HAL_RCC_GetSysClockFreq>
 800212c:	0001      	movs	r1, r0
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x188>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	220f      	movs	r2, #15
 8002136:	4013      	ands	r3, r2
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_RCC_ClockConfig+0x194>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	000a      	movs	r2, r1
 800213e:	40da      	lsrs	r2, r3
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_RCC_ClockConfig+0x198>)
 8002142:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002144:	2003      	movs	r0, #3
 8002146:	f7ff f907 	bl	8001358 <HAL_InitTick>
  
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	0018      	movs	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	b004      	add	sp, #16
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40022000 	.word	0x40022000
 8002158:	40021000 	.word	0x40021000
 800215c:	00001388 	.word	0x00001388
 8002160:	fffff8ff 	.word	0xfffff8ff
 8002164:	0800237c 	.word	0x0800237c
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b08f      	sub	sp, #60	; 0x3c
 8002170:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002172:	2314      	movs	r3, #20
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	4a2b      	ldr	r2, [pc, #172]	; (8002224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002178:	ca13      	ldmia	r2!, {r0, r1, r4}
 800217a:	c313      	stmia	r3!, {r0, r1, r4}
 800217c:	6812      	ldr	r2, [r2, #0]
 800217e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002184:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002186:	c313      	stmia	r3!, {r0, r1, r4}
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002190:	2300      	movs	r3, #0
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
 8002194:	2300      	movs	r3, #0
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
 8002198:	2300      	movs	r3, #0
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a8:	220c      	movs	r2, #12
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d002      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x4a>
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d003      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x50>
 80021b4:	e02d      	b.n	8002212 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80021ba:	e02d      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80021bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021be:	0c9b      	lsrs	r3, r3, #18
 80021c0:	220f      	movs	r2, #15
 80021c2:	4013      	ands	r3, r2
 80021c4:	2214      	movs	r2, #20
 80021c6:	18ba      	adds	r2, r7, r2
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80021cc:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	220f      	movs	r2, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	1d3a      	adds	r2, r7, #4
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80021da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	025b      	lsls	r3, r3, #9
 80021e0:	4013      	ands	r3, r2
 80021e2:	d009      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021e6:	4812      	ldr	r0, [pc, #72]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 80021e8:	f7fd ff8e 	bl	8000108 <__udivsi3>
 80021ec:	0003      	movs	r3, r0
 80021ee:	001a      	movs	r2, r3
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	4353      	muls	r3, r2
 80021f4:	637b      	str	r3, [r7, #52]	; 0x34
 80021f6:	e009      	b.n	800220c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021fa:	000a      	movs	r2, r1
 80021fc:	0152      	lsls	r2, r2, #5
 80021fe:	1a52      	subs	r2, r2, r1
 8002200:	0193      	lsls	r3, r2, #6
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	185b      	adds	r3, r3, r1
 8002208:	021b      	lsls	r3, r3, #8
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002210:	e002      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002214:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002216:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b00f      	add	sp, #60	; 0x3c
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	080022a4 	.word	0x080022a4
 8002228:	080022b4 	.word	0x080022b4
 800222c:	40021000 	.word	0x40021000
 8002230:	007a1200 	.word	0x007a1200

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4d0c      	ldr	r5, [pc, #48]	; (800226c <__libc_init_array+0x38>)
 800223a:	4c0d      	ldr	r4, [pc, #52]	; (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	2600      	movs	r6, #0
 8002246:	f000 f821 	bl	800228c <_init>
 800224a:	4d0a      	ldr	r5, [pc, #40]	; (8002274 <__libc_init_array+0x40>)
 800224c:	4c0a      	ldr	r4, [pc, #40]	; (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	00b3      	lsls	r3, r6, #2
 800225a:	58eb      	ldr	r3, [r5, r3]
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	00b3      	lsls	r3, r6, #2
 8002264:	58eb      	ldr	r3, [r5, r3]
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	0800238c 	.word	0x0800238c
 8002270:	0800238c 	.word	0x0800238c
 8002274:	0800238c 	.word	0x0800238c
 8002278:	08002390 	.word	0x08002390

0800227c <memset>:
 800227c:	0003      	movs	r3, r0
 800227e:	1882      	adds	r2, r0, r2
 8002280:	4293      	cmp	r3, r2
 8002282:	d100      	bne.n	8002286 <memset+0xa>
 8002284:	4770      	bx	lr
 8002286:	7019      	strb	r1, [r3, #0]
 8002288:	3301      	adds	r3, #1
 800228a:	e7f9      	b.n	8002280 <memset+0x4>

0800228c <_init>:
 800228c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002292:	bc08      	pop	{r3}
 8002294:	469e      	mov	lr, r3
 8002296:	4770      	bx	lr

08002298 <_fini>:
 8002298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229e:	bc08      	pop	{r3}
 80022a0:	469e      	mov	lr, r3
 80022a2:	4770      	bx	lr
